const resolves=new Map,swMessageError=(s,t)=>({$msgId$:s.$msgId$,$error$:t}),httpRequestFromWebWorker=s=>new Promise(async t=>{const e=await s.clone().json(),o=await(n=>new Promise(async r=>{const i=[...await self.clients.matchAll()].sort((a,l)=>a.url>l.url?-1:a.url<l.url?1:0)[0];if(i){const l=[r,setTimeout(()=>{resolves.delete(n.$msgId$),r(swMessageError(n,"Timeout"))},12e4)];resolves.set(n.$msgId$,l),i.postMessage(n)}else r(swMessageError(n,"NoParty"))}))(e);t(response(JSON.stringify(o),"application/json"))}),response=(s,t)=>new Response(s,{headers:{"content-type":t||"text/html","Cache-Control":"no-store"}});self.oninstall=()=>self.skipWaiting(),self.onactivate=()=>self.clients.claim(),self.onmessage=s=>{const t=s.data,e=resolves.get(t.$msgId$);e&&(resolves.delete(t.$msgId$),clearTimeout(e[1]),e[0](t))},self.onfetch=s=>{const t=s.request,o=new URL(t.url).pathname;o.endsWith("sw.html")?s.respondWith(response('<!DOCTYPE html><html><head><meta charset="utf-8"><script src="./partytown-sandbox-sw.js?v=0.7.6"><\/script></head></html>')):o.endsWith("proxytown")&&s.respondWith(httpRequestFromWebWorker(t))};
