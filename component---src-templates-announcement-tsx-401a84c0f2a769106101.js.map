{"version":3,"file":"component---src-templates-announcement-tsx-401a84c0f2a769106101.js","mappings":"kNAsCA,MAAMA,EAAqBC,IAAA,IAAC,UAC1BC,EAAS,QACTC,EAAO,SACPC,GACyBH,EAAA,OAAMC,EAAYC,EAAQC,GAAYA,CAAQ,EAE1D,SAASC,EAAgBC,GACtC,MAAM,MAAEC,EAAK,MAAEC,EAAK,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAaL,EAKtD,OACEM,EAAAA,cAAA,OAAKC,UAAWF,EAJO,iCACE,qCAIvBC,EAAAA,cAAA,OAAKC,UAAU,2CACbD,EAAAA,cAACE,EAAAA,EAAW,CACVP,MAAOA,EACPQ,IAAM,GAAEP,WACRK,UAAU,eACVG,MAAO,CAAEC,SAAU,OACnBC,QAAQ,UAGVN,EAAAA,cAAA,OACEC,UAAU,2GACVG,MAAO,CAAEC,SAAU,QAEnBL,EAAAA,cAACZ,EAAkB,CACjBE,UAAWQ,EACXP,QAAUC,GACDQ,EAAAA,cAACO,EAAAA,KAAI,CAACC,GAAIV,GAAiBN,IAGpCQ,EAAAA,cAACS,EAAAA,SAAQ,KACPT,EAAAA,cAAA,MAAIC,UAAU,mEACXL,GAGHI,EAAAA,cAAA,OACEU,wBAAyB,CACvBC,OAAQd,EAAYe,oBAAoBC,MAE1CZ,UAAU,kEAMlBD,EAAAA,cAAA,OACEC,UAAU,0DACVG,MAAO,CAAEC,SAAU,UAK7B,C,gICxFe,SAASS,EAAaC,GACnC,OACEf,EAAAA,cAACP,EAAAA,EAAe,CAACG,MAAOmB,EAAQnB,MAAOC,YAAakB,EAAQlB,YAAaF,MAAOoB,EAAQC,UAAUC,iBAEtG,C,cCuBA,MAhBiB5B,IAAuC,IAApC6B,MAAM,SAAEC,IAAuB9B,EACjD,OACEW,EAAAA,cAACoB,EAAAA,EAAM,KACLpB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACc,EAAiBK,GAClBnB,EAAAA,cAAA,OACEC,UAAU,mEACVS,wBAAyB,CACvBC,OAAQQ,EAASE,KAAKT,oBAAoBC,SAIzC,EAMN,MAAMS,EAAOC,IAAA,IAAGL,MAAM,SAAEC,GAAU,SAAEK,GAAqBD,EAAA,OAC9DvB,EAAAA,cAACyB,EAAAA,EAAG,CAAC7B,MAAQ,GAAEuB,EAASvB,QAAS8B,SAAUF,EAASE,UAAY,C","sources":["webpack://loop-architectural-materials/./src/components/graphic-text-hero.tsx","webpack://loop-architectural-materials/./src/components/blog-post-hero.tsx","webpack://loop-architectural-materials/./src/templates/announcement.tsx"],"sourcesContent":["import React, { Fragment, ReactNode } from 'react'\nimport type { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport Navbar from './navbar'\nimport { Link } from 'gatsby'\n\ntype IDescription = {\n  childMarkdownRemark: {\n    html: string\n  }\n}\ninterface ReferenceProps {\n  contentful_id: string\n  title: string\n  description: string\n  gatsbyImageData: IGatsbyImageData\n  __typename: string\n}\n\ntype IArticleDesctiption = {\n  raw: string\n  references: Array<ReferenceProps>\n}\n\ntype IGraphicTextHeroProps = {\n  title: string\n  description: any\n  image: IGatsbyImageData\n  link?: string\n  is_index?: boolean\n}\n\ntype IConditionalWrapperProps = {\n  condition?: string\n  children: React.ReactElement\n  wrapper: React.FC\n}\n\nconst ConditionalWrapper = ({\n  condition,\n  wrapper,\n  children,\n}: IConditionalWrapperProps) => (condition ? wrapper(children) : children)\n\nexport default function GraphicTextHero(params: IGraphicTextHeroProps) {\n  const { image, title, description, link, is_index } = params\n\n  const index_classNames = \"max-w-full mx-auto h-full z-10\"\n  const content_classNames = \"max-w-full mx-auto h-[40dvh] z-10\"\n\n  return (\n    <div className={is_index ? index_classNames : content_classNames}>\n      <div className=\"grid object-cover w-full h-full mx-auto\">\n        <GatsbyImage\n          image={image}\n          alt={`${title} Banner`}\n          className=\"object-cover\"\n          style={{ gridArea: '1/1' }}\n          loading=\"eager\"\n        />\n\n        <div\n          className=\"relative z-10 grid content-center w-full px-8 mx-auto text-center text-white md:w-1/2 align-items-center\"\n          style={{ gridArea: '1/1' }}\n        >\n          <ConditionalWrapper\n            condition={link}\n            wrapper={(children) => {\n              return <Link to={link as string}>{children as ReactNode}</Link>\n            }}\n          >\n            <Fragment>\n              <h1 className=\"mb-6 text-3xl font-bold leading-none md:text-5xl drop-shadow-md\">\n                {title}\n              </h1>\n\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: description.childMarkdownRemark.html,\n                }}\n                className=\"text-lg font-light leading-tight md:text-xl drop-shadow-md\"\n              />\n            </Fragment>\n          </ConditionalWrapper>\n        </div>\n\n        <div\n          className=\"relative z-0 bg-[#000000] opacity-50 mix-blend-multiply\"\n          style={{ gridArea: '1/1' }}\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { IBlogPost } from '../types'\nimport GraphicTextHero from './graphic-text-hero'\n\nexport default function BlogPostHero(article: IBlogPost) {\n  return (\n    <GraphicTextHero title={article.title} description={article.description} image={article.heroImage.gatsbyImageData} />\n  )\n}\n","import * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport BlogPostHero from '../components/blog-post-hero'\nimport type { IBlogPost } from '../types'\nimport { SEO } from '../components/seo'\n\ntype DataProps = {\n  data: {\n    blogPost: IBlogPost\n  }\n  location: {\n    pathname: string\n  }\n}\n\nconst BlogPost = ({ data: { blogPost } }: DataProps) => {\n  return (\n    <Layout>\n      <>\n        <BlogPostHero {...blogPost} />\n        <div\n          className=\"max-w-3xl px-4 mx-auto my-8 text-lg prose text-dark-text md:px-0\"\n          dangerouslySetInnerHTML={{\n            __html: blogPost.body.childMarkdownRemark.html,\n          }}\n        ></div>\n      </>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const Head = ({ data: { blogPost }, location }: DataProps) => (\n  <SEO title={`${blogPost.title}`} pathname={location.pathname} />\n)\n\nexport const pageQuery = graphql`\n  query BlogPostById($id: String!) {\n    blogPost: contentfulBlogPost(id: { eq: $id }) {\n      id\n      title\n      slug\n      heroImage {\n        gatsbyImageData(width: 1200, height: 400)\n      }\n      body {\n        childMarkdownRemark {\n          html\n        }\n      }\n      description {\n        childMarkdownRemark {\n          html\n        }\n      }\n      tags\n    }\n  }\n`\n"],"names":["ConditionalWrapper","_ref","condition","wrapper","children","GraphicTextHero","params","image","title","description","link","is_index","React","className","GatsbyImage","alt","style","gridArea","loading","Link","to","Fragment","dangerouslySetInnerHTML","__html","childMarkdownRemark","html","BlogPostHero","article","heroImage","gatsbyImageData","data","blogPost","Layout","body","Head","_ref2","location","SEO","pathname"],"sourceRoot":""}