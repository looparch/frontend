{"version":3,"file":"f7f5558eefd7ea3d1e9300a36c24127838d6804d-d96d165c14fa9953a04b.js","mappings":"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","sources":["webpack://loop-architectural-materials/./src/components/layout.tsx","webpack://loop-architectural-materials/./src/components/seo-site-json-ld.tsx","webpack://loop-architectural-materials/./node_modules/voca/es/index.js","webpack://loop-architectural-materials/./src/components/seo-breadcrumbs-json-ld.tsx","webpack://loop-architectural-materials/./src/components/seo.tsx","webpack://loop-architectural-materials/./src/hooks/use-site-metadata.ts"],"sourcesContent":["import React from 'react'\nimport { Slice } from 'gatsby'\n\ntype LayoutProps = {\n  children: JSX.Element\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <>\n      <Slice alias=\"navbar\" />\n      <main className=\"w-full min-h-full mx-auto bg-white max-w-7xl print:bg-transparent\">{children}</main>\n      <Slice alias=\"footer\" />\n    </>\n  )\n}\n","import React from 'react'\nimport useSiteMetadata from '../hooks/use-site-metadata'\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  children?: React.ReactNode\n  siteUrl?: string\n  instagramUrl?: string\n  linkedInUrl?: string\n}\n\nexport const SEOSiteJsonLD = ({ title, description, pathname }: SEOProps) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image,\n    siteUrl,\n    instagramUrl,\n    linkedInUrl,\n  } = useSiteMetadata()\n\n  // SEO object\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  // Site\n  const siteJsonLd = {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    name: seo.title,\n    url: seo.url,\n    sameAs: [\n      instagramUrl,\n      linkedInUrl,\n    ],\n    potentialAction: {\n      '@type': 'SearchAction',\n      target: `${siteUrl}/search/?all_products%5Bquery%5D={search_term_string}`,\n      'query-input': 'required name=search_term_string',\n    },\n  }\n\n  // Organization\n  const organizationJsonLd = {\n    '@context': 'http://schema.org',\n    '@type': 'Organization',\n    name: seo.title,\n    legalName: `${seo.title}, LLC`,\n    url: seo.url,\n    logo: seo.image,\n    foundingDate: '2009',\n    address: {\n      '@type': 'PostalAddress',\n      streetAddress: '3110 N 16th Street',\n      addressLocality: 'Phoenix',\n      addressRegion: 'AZ',\n      postalCode: '85016',\n      addressCountry: 'USA',\n    },\n    contactPoint: {\n      '@type': 'ContactPoint',\n      contactType: 'sales',\n      email: 'info@looparch.com',\n      url: `${seo.url}/contact/`,\n    },\n    sameAs: [\n      instagramUrl,\n      linkedInUrl,\n    ],\n  }\n\n  // Local business\n  const localBusinessJsonLd = {\n    '@context': 'http://schema.org',\n    '@type': 'LocalBusiness',\n    address: {\n      '@type': 'PostalAddress',\n      streetAddress: '3110 N 16th Street',\n      addressLocality: 'Phoenix',\n      addressRegion: 'AZ',\n      postalCode: '85016',\n      addressCountry: 'USA',\n    },\n    telephone: '602-810-1502',\n    image: seo.image,\n    priceRange: '$$$',\n    description: `${seo.description}`,\n    name: seo.title,\n    openingHours: 'Mo,Tu,We,Th,Fr 09:00-17:00',\n    geo: {\n      '@type': 'GeoCoordinates',\n      latitude: '33.484319',\n      longitude: '-112.047970',\n    },\n    sameAs: [\n      'https://www.instagram.com/looparch/',\n      'https://www.facebook.com/looparch/',\n      'https://www.pinterest.com/looparchitecturalmaterials',\n    ],\n  }\n\n  return (\n    <>\n      <script type=\"application/ld+json\">{JSON.stringify(siteJsonLd)}</script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(organizationJsonLd)}\n      </script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(localBusinessJsonLd)}\n      </script>\n    </>\n  )\n}\n","/*! \n * Voca string library 1.4.1\n * https://vocajs.pages.dev\n *\n * Copyright Dmitri Pavlutin and other contributors\n * Released under the MIT license\n */\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\n/**\n * Checks if `value` is `null` or `undefined`\n *\n * @ignore\n * @function isNil\n * @param {*} value The object to check\n * @return {boolean} Returns `true` is `value` is `undefined` or `null`, `false` otherwise\n */\nfunction isNil(value) {\n  return value === undefined || value === null;\n}\n\n/**\n * Converts the `value` to a boolean. If `value` is `undefined` or `null`, returns `defaultValue`.\n *\n * @ignore\n * @function toBoolean\n * @param {*} value The value to convert.\n * @param {boolean} [defaultValue=false] The default value.\n * @return {boolean} Returns the coercion to boolean.\n */\n\nfunction coerceToBoolean(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n\n  return Boolean(value);\n}\n\n/**\n * Checks whether `subject` is a string primitive type.\n *\n * @function isString\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} subject The value to verify.\n * @return {boolean} Returns `true` if `subject` is string primitive type or `false` otherwise.\n * @example\n * v.isString('vacation');\n * // => true\n *\n * v.isString(560);\n * // => false\n */\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n\n/**\n * Get the string representation of the `value`.\n * Converts the `value` to string.\n * If `value` is `null` or `undefined`, return `defaultValue`.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @param {*} [defaultValue=''] The default value to return.\n * @return {string|null}        Returns the string representation of `value`. Returns `defaultValue` if `value` is\n *                              `null` or `undefined`.\n */\n\nfunction coerceToString(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n\n  if (isString(value)) {\n    return value;\n  }\n\n  return String(value);\n}\n\n/**\n * Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of\n * `subject` to lower case.\n *\n * @function capitalize\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string}  [subject='']        The string to capitalize.\n * @param  {boolean} [restToLower=false] Convert the rest of `subject` to lower case.\n * @return {string}                      Returns the capitalized string.\n * @example\n * v.capitalize('apple');\n * // => 'Apple'\n *\n * v.capitalize('aPPle', true);\n * // => 'Apple'\n */\n\nfunction capitalize(subject, restToLower) {\n  var subjectString = coerceToString(subject);\n  var restToLowerCaseBoolean = coerceToBoolean(restToLower);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  if (restToLowerCaseBoolean) {\n    subjectString = subjectString.toLowerCase();\n  }\n\n  return subjectString.substr(0, 1).toUpperCase() + subjectString.substr(1);\n}\n\n/**\n * Converts the `subject` to lower case.\n *\n * @function lowerCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to lower case.\n * @return {string}              Returns the lower case string.\n * @example\n * v.lowerCase('Green');\n * // => 'green'\n *\n * v.lowerCase('BLUE');\n * // => 'blue'\n */\n\nfunction lowerCase(subject) {\n  var subjectString = coerceToString(subject, '');\n  return subjectString.toLowerCase();\n}\n\n/**\n * A regular expression string matching digits\n *\n * @type {string}\n * @ignore\n */\nvar digit = '\\\\d';\n/**\n * A regular expression string matching whitespace\n *\n * @type {string}\n * @ignore\n */\n\nvar whitespace = '\\\\s\\\\uFEFF\\\\xA0';\n/**\n * A regular expression string matching high surrogate\n *\n * @type {string}\n * @ignore\n */\n\nvar highSurrogate = '\\\\uD800-\\\\uDBFF';\n/**\n * A regular expression string matching low surrogate\n *\n * @type {string}\n * @ignore\n */\n\nvar lowSurrogate = '\\\\uDC00-\\\\uDFFF';\n/**\n * A regular expression string matching diacritical mark\n *\n * @type {string}\n * @ignore\n */\n\nvar diacriticalMark = '\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F';\n/**\n * A regular expression to match the base character for a combining mark\n *\n * @type {string}\n * @ignore\n */\n\nvar base = '\\\\0-\\\\u02FF\\\\u0370-\\\\u1AAF\\\\u1B00-\\\\u1DBF\\\\u1E00-\\\\u20CF\\\\u2100-\\\\uD7FF\\\\uE000-\\\\uFE1F\\\\uFE30-\\\\uFFFF';\n/**\n * Regular expression to match combining marks\n *\n * @see http://unicode.org/faq/char_combmark.html\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_COMBINING_MARKS = new RegExp('([' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])([' + diacriticalMark + ']+)', 'g');\n/**\n * Regular expression to match surrogate pairs\n *\n * @see http://www.unicode.org/faq/utf_bom.html#utf16-2\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_SURROGATE_PAIRS = new RegExp('([' + highSurrogate + '])([' + lowSurrogate + '])', 'g');\n/**\n * Regular expression to match a unicode character\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_UNICODE_CHARACTER = new RegExp('((?:[' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])(?:[' + diacriticalMark + ']+))|\\\n([' + highSurrogate + '][' + lowSurrogate + '])|\\\n([\\\\n\\\\r\\\\u2028\\\\u2029])|\\\n(.)', 'g');\n/**\n * Regular expression to match whitespaces\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_WHITESPACE = new RegExp('[' + whitespace + ']');\n/**\n * Regular expression to match whitespaces from the left side\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_TRIM_LEFT = new RegExp('^[' + whitespace + ']+');\n/**\n * Regular expression to match whitespaces from the right side\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_TRIM_RIGHT = new RegExp('[' + whitespace + ']+$');\n/**\n * Regular expression to match digit characters\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_DIGIT = new RegExp('^' + digit + '+$');\n/**\n * Regular expression to match regular expression special characters\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_SPECIAL_CHARACTERS = /[-[\\]{}()*+!<=:?./\\\\^$|#,]/g;\n/**\n * Regular expression to match not latin characters\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;\n/**\n * Regular expression to match HTML special characters.\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&\"'`]/g;\n/**\n * Regular expression to match sprintf format string\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\\d+)\\$)?(\\+)?([ 0]|'.{1})?(-)?(\\d+)?(?:\\.(\\d+))?([bcdiouxXeEfgGs])?/g;\n/**\n * Regular expression to match trailing zeros in a number\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_TRAILING_ZEROS = /\\.?0+$/g;\n/**\n * Regular expression to match a list of tags.\n *\n * @see https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-name\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;\n\n/**\n * A regular expression to match the General Punctuation Unicode block\n *\n * @type {string}\n * @ignore\n */\n\nvar generalPunctuationBlock = '\\\\u2000-\\\\u206F';\n/**\n * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\n *\n * @type {string}\n * @ignore\n */\n\nvar nonCharacter = '\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7';\n/**\n * A regular expression to match the dingbat Unicode block\n *\n * @type {string}\n * @ignore\n */\n\nvar dingbatBlock = '\\\\u2700-\\\\u27BF';\n/**\n * A regular expression string that matches lower case letters: LATIN\n *\n * @type {string}\n * @ignore\n */\n\nvar lowerCaseLetter = 'a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F';\n/**\n * A regular expression string that matches upper case letters: LATIN\n *\n * @type {string}\n * @ignore\n */\n\nvar upperCaseLetter = '\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e';\n/**\n * Regular expression to match Unicode words\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_WORD = new RegExp('(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)?(?:[' + lowerCaseLetter + '][' + diacriticalMark + ']*)+|\\\n(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)+(?![' + lowerCaseLetter + '])|\\\n[' + digit + ']+|\\\n[' + dingbatBlock + ']|\\\n[^' + nonCharacter + generalPunctuationBlock + whitespace + ']+', 'g');\n/**\n * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_LATIN_WORD = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n/**\n * Regular expression to match alpha characters\n *\n * @see http://stackoverflow.com/a/22075070/1894471\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_ALPHA = new RegExp('^(?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)+$');\n/**\n * Regular expression to match alpha and digit characters\n *\n * @see http://stackoverflow.com/a/22075070/1894471\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_ALPHA_DIGIT = new RegExp('^((?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)|[' + digit + '])+$');\n/**\n * Regular expression to match Extended ASCII characters, i.e. the first 255\n *\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF]*$/;\n\n/**\n * Verifies if `value` is `undefined` or `null` and returns `defaultValue`. In other case returns `value`.\n *\n * @ignore\n * @function nilDefault\n * @param {*} value The value to verify.\n * @param {*} defaultValue The default value.\n * @return {*} Returns `defaultValue` if `value` is `undefined` or `null`, otherwise `defaultValue`.\n */\nfunction nilDefault(value, defaultValue) {\n  return value == null ? defaultValue : value;\n}\n\n/**\n * Get the string representation of the `value`.\n * Converts the `value` to string.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @return {string|null}        Returns the string representation of `value`.\n */\n\nfunction toString(value) {\n  if (isNil(value)) {\n    return null;\n  }\n\n  if (isString(value)) {\n    return value;\n  }\n\n  return String(value);\n}\n\n/**\n * Splits `subject` into an array of words.\n *\n * @function words\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {Array} Returns the array of words.\n * @example\n * v.words('gravity can cross dimensions');\n * // => ['gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('GravityCanCrossDimensions');\n * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n *\n * v.words('Gravity - can cross dimensions!');\n * // => ['Gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => ['Earth', 'gravity']\n */\n\nfunction words(subject, pattern, flags) {\n  var subjectString = coerceToString(subject);\n  var patternRegExp;\n\n  if (isNil(pattern)) {\n    patternRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  } else if (pattern instanceof RegExp) {\n    patternRegExp = pattern;\n  } else {\n    var flagsString = toString(nilDefault(flags, ''));\n    patternRegExp = new RegExp(toString(pattern), flagsString);\n  }\n\n  return nilDefault(subjectString.match(patternRegExp), []);\n}\n\n/**\n * Transforms the `word` into camel case chunk.\n *\n * @param  {string} word  The word string\n * @param  {number} index The index of the word in phrase.\n * @return {string}       The transformed word.\n * @ignore\n */\n\nfunction wordToCamel(word, index) {\n  return index === 0 ? lowerCase(word) : capitalize(word, true);\n}\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/CamelCase\">camel case</a>.\n *\n * @function camelCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to camel case.\n * @return {string}              The camel case string.\n * @example\n * v.camelCase('bird flight');\n * // => 'birdFlight'\n *\n * v.camelCase('BirdFlight');\n * // => 'birdFlight'\n *\n * v.camelCase('-BIRD-FLIGHT-');\n * // => 'birdFlight'\n */\n\n\nfunction camelCase(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  return words(subjectString).map(wordToCamel).join('');\n}\n\n/**\n * Converts the first character of `subject` to lower case.\n *\n * @function decapitalize\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to decapitalize.\n * @return {string}              Returns the decapitalized string.\n * @example\n * v.decapitalize('Sun');\n * // => 'sun'\n *\n * v.decapitalize('moon');\n * // => 'moon'\n */\n\nfunction decapitalize(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  return subjectString.substr(0, 1).toLowerCase() + subjectString.substr(1);\n}\n\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Letter_case#cite_ref-13\">kebab case</a>,\n * also called <i>spinal case</i> or <i>lisp case</i>.\n *\n * @function kebabCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to kebab case.\n * @return {string}              Returns the kebab case string.\n * @example\n * v.kebabCase('goodbye blue sky');\n * // => 'goodbye-blue-sky'\n *\n * v.kebabCase('GoodbyeBlueSky');\n * // => 'goodbye-blue-sky'\n *\n * v.kebabCase('-Goodbye-Blue-Sky-');\n * // => 'goodbye-blue-sky'\n */\n\nfunction kebabCase(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  return words(subjectString).map(lowerCase).join('-');\n}\n\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>.\n *\n * @function snakeCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to snake case.\n * @return {string}              Returns the snake case string.\n * @example\n * v.snakeCase('learning to fly');\n * // => 'learning_to_fly'\n *\n * v.snakeCase('LearningToFly');\n * // => 'learning_to_fly'\n *\n * v.snakeCase('-Learning-To-Fly-');\n * // => 'learning_to_fly'\n */\n\nfunction snakeCase(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  return words(subjectString).map(lowerCase).join('_');\n}\n\n/**\n * Converts the `subject` to upper case.\n *\n * @function upperCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to upper case.\n * @return {string}              Returns the upper case string.\n * @example\n * v.upperCase('school');\n * // => 'SCHOOL'\n */\n\nfunction upperCase(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.toUpperCase();\n}\n\n/**\n * Converts the uppercase alpha characters of `subject` to lowercase and lowercase\n * characters to uppercase.\n *\n * @function swapCase\n * @static\n * @since 1.3.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to swap the case.\n * @return {string}              Returns the converted string.\n * @example\n * v.swapCase('League of Shadows');\n * // => 'lEAGUE OF sHADOWS'\n *\n * v.swapCase('2 Bees');\n * // => '2 bEES'\n */\n\nfunction swapCase(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('').reduce(swapAndConcat, '');\n}\n\nfunction swapAndConcat(swapped, character) {\n  var lowerCase = character.toLowerCase();\n  var upperCase = character.toUpperCase();\n  return swapped + (character === lowerCase ? upperCase : lowerCase);\n}\n\n/**\n * Converts the subject to title case.\n *\n * @function titleCase\n * @static\n * @since 1.4.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to title case.\n * @param  {Array}  [noSplit]    Do not split words at the specified characters.\n * @return {string}              Returns the title case string.\n * @example\n * v.titleCase('learning to fly');\n * // => 'Learning To Fly'\n *\n * v.titleCase('jean-luc is good-looking', ['-']);\n * // => 'Jean-luc Is Good-looking'\n */\n\nfunction titleCase(subject, noSplit) {\n  var subjectString = coerceToString(subject);\n  var noSplitArray = Array.isArray(noSplit) ? noSplit : [];\n  var wordsRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  return subjectString.replace(wordsRegExp, function (word, index) {\n    var isNoSplit = index > 0 && noSplitArray.indexOf(subjectString[index - 1]) >= 0;\n    return isNoSplit ? word.toLowerCase() : capitalize(word, true);\n  });\n}\n\n/**\n * Clip the number to interval `downLimit` to `upLimit`.\n *\n * @ignore\n * @function clipNumber\n * @param {number} value The number to clip\n * @param {number} downLimit The down limit\n * @param {number} upLimit The upper limit\n * @return {number} The clipped number\n */\nfunction clipNumber(value, downLimit, upLimit) {\n  if (value <= downLimit) {\n    return downLimit;\n  }\n\n  if (value >= upLimit) {\n    return upLimit;\n  }\n\n  return value;\n}\n\n/**\n * Max save integer value\n *\n * @ignore\n * @type {number}\n */\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\n/**\n * Transforms `value` to an integer.\n *\n * @ignore\n * @function toInteger\n * @param {number} value The number to transform.\n * @returns {number} Returns the transformed integer.\n */\n\nfunction toInteger(value) {\n  if (value === Infinity) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  if (value === -Infinity) {\n    return -MAX_SAFE_INTEGER;\n  }\n\n  return ~~value;\n}\n\n/**\n * Truncates `subject` to a new `length`.\n *\n * @function truncate\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to truncate.\n * @param  {int}    length       The length to truncate the string.\n * @param  {string} [end='...']  The string to be added at the end.\n * @return {string}              Returns the truncated string.\n * @example\n * v.truncate('Once upon a time', 7);\n * // => 'Once...'\n *\n * v.truncate('Good day, Little Red Riding Hood', 14, ' (...)');\n * // => 'Good day (...)'\n *\n * v.truncate('Once upon', 10);\n * // => 'Once upon'\n */\n\nfunction truncate(subject, length, end) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var endString = coerceToString(end, '...');\n\n  if (lengthInt >= subjectString.length) {\n    return subjectString;\n  }\n\n  return subjectString.substr(0, length - endString.length) + endString;\n}\n\n/**\n * Access a character from `subject` at specified `position`.\n *\n * @function charAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {numbers} position The position to get the character.\n * @return {string} Returns the character at specified position.\n * @example\n * v.charAt('helicopter', 0);\n * // => 'h'\n *\n * v.charAt('helicopter', 1);\n * // => 'e'\n */\n\nfunction charAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  return subjectString.charAt(position);\n}\n\nvar HIGH_SURROGATE_START = 0xd800;\nvar HIGH_SURROGATE_END = 0xdbff;\nvar LOW_SURROGATE_START = 0xdc00;\nvar LOW_SURROGATE_END = 0xdfff;\n/**\n * Checks if `codePoint` is a high-surrogate number from range 0xD800 to 0xDBFF.\n *\n * @ignore\n * @param {number} codePoint The code point number to be verified\n * @return {boolean} Returns a boolean whether `codePoint` is a high-surrogate number.\n */\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END;\n}\n/**\n * Checks if `codePoint` is a low-surrogate number from range 0xDC00 to 0xDFFF.\n *\n * @ignore\n * @param {number} codePoint The code point number to be verified\n * @return {boolean} Returns a boolean whether `codePoint` is a low-surrogate number.\n */\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= LOW_SURROGATE_START && codePoint <= LOW_SURROGATE_END;\n}\n/**\n * Get the astral code point number based on surrogate pair numbers.\n *\n * @ignore\n * @param {number} highSurrogate The high-surrogate code point number.\n * @param {number} lowSurrogate The low-surrogate code point number.\n * @return {number} Returns the astral symbol number.\n */\n\nfunction getAstralNumberFromSurrogatePair(highSurrogate, lowSurrogate) {\n  return (highSurrogate - HIGH_SURROGATE_START) * 0x400 + lowSurrogate - LOW_SURROGATE_START + 0x10000;\n}\n\n/**\n * Get the number representation of the `value`.\n * Converts the `value` to number.\n * If `value` is `null` or `undefined`, return `defaultValue`.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @param {*} [defaultValue=''] The default value to return.\n * @return {number|null}        Returns the number representation of `value`. Returns `defaultValue` if `value` is\n *                              `null` or `undefined`.\n */\n\nfunction coerceToNumber(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return Number(value);\n}\n\n/**\n * If `value` is `NaN`, return `defaultValue`. In other case returns `value`.\n *\n * @ignore\n * @function nanDefault\n * @param {*} value The value to verify.\n * @param {*} defaultValue The default value.\n * @return {*} Returns `defaultValue` if `value` is `NaN`, otherwise `defaultValue`.\n */\nfunction nanDefault(value, defaultValue) {\n  return value !== value ? defaultValue : value;\n}\n\n/**\n * Get the Unicode code point value of the character at `position`. <br/>\n * If a valid UTF-16 <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">\n * surrogate pair</a> starts at `position`, the\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#astralplanes\">astral code point</a>\n * value at `position` is returned.\n *\n * @function codePointAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {number} position The position to get the code point number.\n * @return {number} Returns a non-negative number less than or equal to `0x10FFFF`.\n * @example\n * v.codePointAt('rain', 1);\n * // => 97, or 0x0061\n *\n * v.codePointAt('\\uD83D\\uDE00 is smile', 0); // or '😀 is smile'\n * // => 128512, or 0x1F600\n */\n\nfunction codePointAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  var subjectStringLength = subjectString.length;\n  var positionNumber = coerceToNumber(position);\n  positionNumber = nanDefault(positionNumber, 0);\n\n  if (positionNumber < 0 || positionNumber >= subjectStringLength) {\n    return undefined;\n  }\n\n  var firstCodePoint = subjectString.charCodeAt(positionNumber);\n  var secondCodePoint;\n\n  if (isHighSurrogate(firstCodePoint) && subjectStringLength > positionNumber + 1) {\n    secondCodePoint = subjectString.charCodeAt(positionNumber + 1);\n\n    if (isLowSurrogate(secondCodePoint)) {\n      return getAstralNumberFromSurrogatePair(firstCodePoint, secondCodePoint);\n    }\n  }\n\n  return firstCodePoint;\n}\n\n/**\n * Extracts the first `length` characters from `subject`.\n *\n * @function first\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {int}    [length=1]   The number of characters to extract.\n * @return {string}              Returns the first characters string.\n * @example\n * v.first('helicopter');\n * // => 'h'\n *\n * v.first('vehicle', 2);\n * // => 've'\n *\n * v.first('car', 5);\n * // => 'car'\n */\n\nfunction first(subject, length) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n  if (subjectString.length <= lengthInt) {\n    return subjectString;\n  }\n\n  return subjectString.substr(0, lengthInt);\n}\n\n/**\n * Get a grapheme from `subject` at specified `position` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function graphemeAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {number} position The position to get the grapheme.\n * @return {string} Returns the grapheme at specified position.\n * @example\n * v.graphemeAt('\\uD835\\uDC00\\uD835\\uDC01', 0); // or '𝐀𝐁'\n * // => 'A'\n *\n * v.graphemeAt('cafe\\u0301', 3); // or 'café'\n * // => 'é'\n */\n\nfunction graphemeAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  var positionNumber = coerceToNumber(position);\n  var graphemeMatch;\n  var graphemeMatchIndex = 0;\n  positionNumber = nanDefault(positionNumber, 0);\n\n  while ((graphemeMatch = REGEXP_UNICODE_CHARACTER.exec(subjectString)) !== null) {\n    if (graphemeMatchIndex === positionNumber) {\n      REGEXP_UNICODE_CHARACTER.lastIndex = 0;\n      return graphemeMatch[0];\n    }\n\n    graphemeMatchIndex++;\n  }\n\n  return '';\n}\n\n/**\n * Extracts the last `length` characters from `subject`.\n *\n * @function last\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {int}    [length=1]   The number of characters to extract.\n * @return {string}              Returns the last characters string.\n * @example\n * v.last('helicopter');\n * // => 'r'\n *\n * v.last('vehicle', 2);\n * // => 'le'\n *\n * v.last('car', 5);\n * // => 'car'\n */\n\nfunction last(subject, length) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n  if (subjectString.length <= lengthInt) {\n    return subjectString;\n  }\n\n  return subjectString.substr(subjectString.length - lengthInt, lengthInt);\n}\n\n/**\n * Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer\n * than `length`.\n *\n * @static\n * @function prune\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to prune.\n * @param  {int}    length       The length to prune the string.\n * @param  {string} [end='...']  The string to be added at the end.\n * @return {string}              Returns the pruned string.\n * @example\n * v.prune('Once upon a time', 7);\n * // => 'Once...'\n *\n * v.prune('Good day, Little Red Riding Hood', 16, ' (more)');\n * // => 'Good day (more)'\n *\n * v.prune('Once upon', 10);\n * // => 'Once upon'\n */\n\nfunction prune(subject, length, end) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var endString = coerceToString(end, '...');\n\n  if (lengthInt >= subjectString.length) {\n    return subjectString;\n  }\n\n  var pattern = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  var truncatedLength = 0;\n  subjectString.replace(pattern, function (word, offset) {\n    var wordInsertLength = offset + word.length;\n\n    if (wordInsertLength <= lengthInt - endString.length) {\n      truncatedLength = wordInsertLength;\n    }\n  });\n  return subjectString.substr(0, truncatedLength) + endString;\n}\n\n/**\n * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n * included.\n *\n * @function slice\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']         The string to extract from.\n * @param  {number} start                The position to start extraction. If negative use `subject.length + start`.\n * @param  {number} [end=subject.length] The position to end extraction. If negative use `subject.length + end`.\n * @return {string}                      Returns the extracted string.\n * @note Uses native `String.prototype.slice()`\n * @example\n * v.slice('miami', 1);\n * // => 'iami'\n *\n * v.slice('florida', -4);\n * // => 'rida'\n *\n * v.slice('florida', 1, 4);\n * // => \"lor\"\n */\n\nfunction slice(subject, start, end) {\n  return coerceToString(subject).slice(start, end);\n}\n\n/**\n * Extracts from `subject` a string from `start` position a number of `length` characters.\n *\n * @function substr\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']                 The string to extract from.\n * @param  {number} start                        The position to start extraction.\n * @param  {number} [length=subject.endOfString] The number of characters to extract. If omitted, extract to the end of `subject`.\n * @return {string}                              Returns the extracted string.\n * @note Uses native `String.prototype.substr()`\n * @example\n * v.substr('infinite loop', 9);\n * // => 'loop'\n *\n * v.substr('dreams', 2, 2);\n * // => 'ea'\n */\n\nfunction substr(subject, start, length) {\n  return coerceToString(subject).substr(start, length);\n}\n\n/**\n * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n * included.\n *\n * @function substring\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']         The string to extract from.\n * @param  {number} start                The position to start extraction.\n * @param  {number} [end=subject.length] The position to end extraction.\n * @return {string}                      Returns the extracted string.\n * @note Uses native `String.prototype.substring()`\n * @example\n * v.substring('beach', 1);\n * // => 'each'\n *\n * v.substring('ocean', 1, 3);\n * // => 'ea'\n */\n\nfunction substring(subject, start, end) {\n  return coerceToString(subject).substring(start, end);\n}\n\n/**\n * Counts the characters in `subject`.<br/>\n *\n * @function count\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string to count characters.\n * @return {number}              Returns the number of characters in `subject`.\n * @example\n * v.count('rain');\n * // => 4\n */\n\nfunction count(subject) {\n  return coerceToString(subject).length;\n}\n\n/**\n * Counts the graphemes in `subject` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function  countGraphemes\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string to count graphemes.\n * @return {number}              Returns the number of graphemes in `subject`.\n * @example\n * v.countGraphemes('cafe\\u0301'); // or 'café'\n * // => 4\n *\n * v.countGraphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n * // => 2\n *\n * v.countGraphemes('rain');\n * // => 4\n */\n\nfunction countGrapheme(subject) {\n  return coerceToString(subject).replace(REGEXP_COMBINING_MARKS, '*').replace(REGEXP_SURROGATE_PAIRS, '*').length;\n}\n\n/**\n * Counts the number of `substring` appearances in `subject`.\n *\n * @function countSubstrings\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string where to count.\n * @param  {string} substring    The substring to be counted.\n * @return {number}              Returns the number of `substring` appearances.\n * @example\n * v.countSubstrings('bad boys, bad boys whatcha gonna do?', 'boys');\n * // => 2\n *\n * v.countSubstrings('every dog has its day', 'cat');\n * // => 0\n */\n\nfunction countSubstrings(subject, substring) {\n  var subjectString = coerceToString(subject);\n  var substringString = coerceToString(substring);\n  var substringLength = substringString.length;\n  var count = 0;\n  var matchIndex = 0;\n\n  if (subjectString === '' || substringString === '') {\n    return count;\n  }\n\n  do {\n    matchIndex = subjectString.indexOf(substringString, matchIndex);\n\n    if (matchIndex !== -1) {\n      count++;\n      matchIndex += substringLength;\n    }\n  } while (matchIndex !== -1);\n\n  return count;\n}\n\nvar reduce = Array.prototype.reduce;\n/**\n * Counts the characters in `subject` for which `predicate` returns truthy.\n *\n * @function  countWhere\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string}   [subject=''] The string to count characters.\n * @param  {Function} predicate    The predicate function invoked on each character with parameters `(character, index, string)`.\n * @param  {Object}   [context]    The context to invoke the `predicate`.\n * @return {number}                Returns the number of characters for which `predicate` returns truthy.\n * @example\n * v.countWhere('hola!', v.isAlpha);\n * // => 4\n *\n * v.countWhere('2022', function(character, index, str) {\n *   return character === '2';\n * });\n * // => 3\n */\n\nfunction countWhere(subject, predicate, context) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '' || typeof predicate !== 'function') {\n    return 0;\n  }\n\n  var predicateWithContext = predicate.bind(context);\n  return reduce.call(subjectString, function (countTruthy, character, index) {\n    return predicateWithContext(character, index, subjectString) ? countTruthy + 1 : countTruthy;\n  }, 0);\n}\n\n/**\n * Counts the number of words in `subject`.\n *\n * @function countWords\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {number} Returns the number of words.\n * @example\n * v.countWords('gravity can cross dimensions');\n * // => 4\n *\n * v.countWords('GravityCanCrossDimensions');\n * // => 4\n *\n * v.countWords('Gravity - can cross dimensions!');\n * // => 4\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => 2\n */\n\nfunction countWords(subject, pattern, flags) {\n  return words(subject, pattern, flags).length;\n}\n\n/**\n * The current index.\n *\n * @ignore\n * @name ReplacementIndex#index\n * @type {number}\n * @return {ReplacementIndex} ReplacementIndex instance.\n */\n\nfunction ReplacementIndex() {\n  this.index = 0;\n}\n/**\n * Increment the current index.\n *\n * @ignore\n * @return {undefined}\n */\n\n\nReplacementIndex.prototype.increment = function () {\n  this.index++;\n};\n/**\n * Increment the current index by position.\n *\n * @ignore\n * @param {number} [position] The replacement position.\n * @return {undefined}\n */\n\n\nReplacementIndex.prototype.incrementOnEmptyPosition = function (position) {\n  if (isNil(position)) {\n    this.increment();\n  }\n};\n/**\n * Get the replacement index by position.\n *\n * @ignore\n * @param {number} [position] The replacement position.\n * @return {number} The replacement index.\n */\n\n\nReplacementIndex.prototype.getIndexByPosition = function (position) {\n  return isNil(position) ? this.index : position - 1;\n};\n\n// Type specifiers\nvar TYPE_INTEGER = 'i';\nvar TYPE_INTEGER_BINARY = 'b';\nvar TYPE_INTEGER_ASCII_CHARACTER = 'c';\nvar TYPE_INTEGER_DECIMAL = 'd';\nvar TYPE_INTEGER_OCTAL = 'o';\nvar TYPE_INTEGER_UNSIGNED_DECIMAL = 'u';\nvar TYPE_INTEGER_HEXADECIMAL = 'x';\nvar TYPE_INTEGER_HEXADECIMAL_UPPERCASE = 'X';\nvar TYPE_FLOAT_SCIENTIFIC = 'e';\nvar TYPE_FLOAT_SCIENTIFIC_UPPERCASE = 'E';\nvar TYPE_FLOAT = 'f';\nvar TYPE_FLOAT_SHORT = 'g';\nvar TYPE_FLOAT_SHORT_UPPERCASE = 'G';\nvar TYPE_STRING = 's'; // Simple literals\nvar LITERAL_SINGLE_QUOTE = \"'\";\nvar LITERAL_PLUS = '+';\nvar LITERAL_MINUS = '-';\nvar LITERAL_PERCENT_SPECIFIER = '%%'; // Radix constants to format numbers\n\nvar RADIX_BINARY = 2;\nvar RADIX_OCTAL = 8;\nvar RADIX_HEXADECIMAL = 16;\n\n/**\n * Repeats the `subject` number of `times`.\n *\n * @function repeat\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to repeat.\n * @param {number} [times=1] The number of times to repeat.\n * @return {string} Returns the repeated string.\n * @example\n * v.repeat('w', 3);\n * // => 'www'\n *\n * v.repeat('world', 0);\n * // => ''\n */\n\nfunction repeat(subject, times) {\n  var subjectString = coerceToString(subject);\n  var timesInt = isNil(times) ? 1 : clipNumber(toInteger(times), 0, MAX_SAFE_INTEGER);\n  var repeatString = '';\n\n  while (timesInt) {\n    if (timesInt & 1) {\n      repeatString += subjectString;\n    }\n\n    if (timesInt > 1) {\n      subjectString += subjectString;\n    }\n\n    timesInt >>= 1;\n  }\n\n  return repeatString;\n}\n\n/**\n * Creates the padding string.\n *\n * @ignore\n * @param {string} padCharacters The characters to create padding string.\n * @param {number} length The padding string length.\n * @return {string} The padding string.\n */\n\nfunction buildPadding(padCharacters, length) {\n  var padStringRepeat = toInteger(length / padCharacters.length);\n  var padStringRest = length % padCharacters.length;\n  return repeat(padCharacters, padStringRepeat + padStringRest).substr(0, length);\n}\n\n/**\n * Pads `subject` from left to a new `length`.\n *\n * @function padLeft\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to left pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the left padded string.\n * @example\n * v.padLeft('dog', 5);\n * // => '  dog'\n *\n * v.padLeft('bird', 6, '-');\n * // => '--bird'\n *\n * v.padLeft('cat', 6, '-=');\n * // => '-=-cat'\n */\n\nfunction padLeft(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n\n  return buildPadding(padString, lengthInt - subjectString.length) + subjectString;\n}\n\n/**\n * Pads `subject` from right to a new `length`.\n *\n * @function padRight\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to right pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the right padded string.\n * @example\n * v.padRight('dog', 5);\n * // => 'dog  '\n *\n * v.padRight('bird', 6, '-');\n * // => 'bird--'\n *\n * v.padRight('cat', 6, '-=');\n * // => 'cat-=-'\n */\n\nfunction padRight(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n\n  return subjectString + buildPadding(padString, lengthInt - subjectString.length);\n}\n\n/**\n * Aligns and pads `subject` string.\n *\n * @ignore\n * @param {string} subject The subject string.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the aligned and padded string.\n */\n\nfunction alignAndPad(subject, conversion) {\n  var width = conversion.width;\n\n  if (isNil(width) || subject.length >= width) {\n    return subject;\n  }\n\n  var padType = conversion.alignmentSpecifier === LITERAL_MINUS ? padRight : padLeft;\n  return padType(subject, width, conversion.getPaddingCharacter());\n}\n\n/**\n * Add sign to the formatted number.\n *\n * @ignore\n * @name addSignToFormattedNumber\n * @param  {number} replacementNumber The number to be replaced.\n * @param  {string} formattedReplacement The formatted version of number.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted number string with a sign.\n */\n\nfunction addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion) {\n  if (conversion.signSpecifier === LITERAL_PLUS && replacementNumber >= 0) {\n    formattedReplacement = LITERAL_PLUS + formattedReplacement;\n  }\n\n  return formattedReplacement;\n}\n\n/**\n * Formats a float type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction float(replacement, conversion) {\n  var replacementNumber = parseFloat(replacement);\n  var formattedReplacement;\n\n  if (isNaN(replacementNumber)) {\n    replacementNumber = 0;\n  }\n\n  var precision = coerceToNumber(conversion.precision, 6);\n\n  switch (conversion.typeSpecifier) {\n    case TYPE_FLOAT:\n      formattedReplacement = replacementNumber.toFixed(precision);\n      break;\n\n    case TYPE_FLOAT_SCIENTIFIC:\n      formattedReplacement = replacementNumber.toExponential(precision);\n      break;\n\n    case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n      formattedReplacement = replacementNumber.toExponential(precision).toUpperCase();\n      break;\n\n    case TYPE_FLOAT_SHORT:\n    case TYPE_FLOAT_SHORT_UPPERCASE:\n      formattedReplacement = formatFloatAsShort(replacementNumber, precision, conversion);\n      break;\n  }\n\n  formattedReplacement = addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion);\n  return coerceToString(formattedReplacement);\n}\n/**\n * Formats the short float.\n *\n * @ignore\n * @param  {number} replacementNumber The number to format.\n * @param  {number} precision The precision to format the float.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string}  Returns the formatted short float.\n */\n\nfunction formatFloatAsShort(replacementNumber, precision, conversion) {\n  if (replacementNumber === 0) {\n    return '0';\n  }\n\n  var nonZeroPrecision = precision === 0 ? 1 : precision;\n  var formattedReplacement = replacementNumber.toPrecision(nonZeroPrecision).replace(REGEXP_TRAILING_ZEROS, '');\n\n  if (conversion.typeSpecifier === TYPE_FLOAT_SHORT_UPPERCASE) {\n    formattedReplacement = formattedReplacement.toUpperCase();\n  }\n\n  return formattedReplacement;\n}\n\n/**\n * Formats an integer type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction integerBase(replacement, conversion) {\n  var integer = parseInt(replacement);\n\n  if (isNaN(integer)) {\n    integer = 0;\n  }\n\n  integer = integer >>> 0;\n\n  switch (conversion.typeSpecifier) {\n    case TYPE_INTEGER_ASCII_CHARACTER:\n      integer = String.fromCharCode(integer);\n      break;\n\n    case TYPE_INTEGER_BINARY:\n      integer = integer.toString(RADIX_BINARY);\n      break;\n\n    case TYPE_INTEGER_OCTAL:\n      integer = integer.toString(RADIX_OCTAL);\n      break;\n\n    case TYPE_INTEGER_HEXADECIMAL:\n      integer = integer.toString(RADIX_HEXADECIMAL);\n      break;\n\n    case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n      integer = integer.toString(RADIX_HEXADECIMAL).toUpperCase();\n      break;\n  }\n\n  return coerceToString(integer);\n}\n\n/**\n * Formats a decimal integer type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction integerDecimal(replacement, conversion) {\n  var integer = parseInt(replacement);\n\n  if (isNaN(integer)) {\n    integer = 0;\n  }\n\n  return addSignToFormattedNumber(integer, toString(integer), conversion);\n}\n\n/**\n * Formats a string type according to specifiers.\n *\n * @ignore\n * @param {string} replacement The string to be formatted.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction stringFormat(replacement, conversion) {\n  var formattedReplacement = replacement;\n  var precision = conversion.precision;\n\n  if (!isNil(precision) && formattedReplacement.length > precision) {\n    formattedReplacement = truncate(formattedReplacement, precision, '');\n  }\n\n  return formattedReplacement;\n}\n\n/**\n * Returns the computed string based on format specifiers.\n *\n * @ignore\n * @name computeReplacement\n * @param {string} replacement The replacement value.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the computed string.\n */\n\nfunction compute(replacement, conversion) {\n  var formatFunction;\n\n  switch (conversion.typeSpecifier) {\n    case TYPE_STRING:\n      formatFunction = stringFormat;\n      break;\n\n    case TYPE_INTEGER_DECIMAL:\n    case TYPE_INTEGER:\n      formatFunction = integerDecimal;\n      break;\n\n    case TYPE_INTEGER_ASCII_CHARACTER:\n    case TYPE_INTEGER_BINARY:\n    case TYPE_INTEGER_OCTAL:\n    case TYPE_INTEGER_HEXADECIMAL:\n    case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n    case TYPE_INTEGER_UNSIGNED_DECIMAL:\n      formatFunction = integerBase;\n      break;\n\n    case TYPE_FLOAT:\n    case TYPE_FLOAT_SCIENTIFIC:\n    case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n    case TYPE_FLOAT_SHORT:\n    case TYPE_FLOAT_SHORT_UPPERCASE:\n      formatFunction = float;\n      break;\n  }\n\n  var formattedString = formatFunction(replacement, conversion);\n  return alignAndPad(formattedString, conversion);\n}\n\n/**\n * Construct the new conversion specification object.\n *\n * @ignore\n * @param {Object} properties An object with properties to initialize.\n * @return {ConversionSpecification} ConversionSpecification instance.\n */\n\nfunction ConversionSpecification(properties) {\n  /**\n   * The percent characters from conversion specification.\n   *\n   * @ignore\n   * @name ConversionSpecification#percent\n   * @type {string}\n   */\n  this.percent = properties.percent;\n  /**\n   *  The sign specifier to force a sign to be used on a number.\n   *\n   * @ignore\n   * @name ConversionSpecification#signSpecifier\n   * @type {string}\n   */\n\n  this.signSpecifier = properties.signSpecifier;\n  /**\n   * The padding specifier that says what padding character will be used.\n   *\n   * @ignore\n   * @name ConversionSpecification#paddingSpecifier\n   * @type {string}\n   */\n\n  this.paddingSpecifier = properties.paddingSpecifier;\n  /**\n   * The alignment specifier that says if the result should be left-justified or right-justified.\n   *\n   * @ignore\n   * @name ConversionSpecification#alignmentSpecifier\n   * @type {string}\n   */\n\n  this.alignmentSpecifier = properties.alignmentSpecifier;\n  /**\n   * The width specifier how many characters this conversion should result in.\n   *\n   * @ignore\n   * @name ConversionSpecification#width\n   * @type {number}\n   */\n\n  this.width = properties.width;\n  /**\n   * The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n   *\n   * @ignore\n   * @name ConversionSpecification#precision\n   * @type {number}\n   */\n\n  this.precision = properties.precision;\n  /**\n   * The type specifier says what type the argument data should be treated as.\n   *\n   * @ignore\n   * @name ConversionSpecification#typeSpecifier\n   * @type {string}\n   */\n\n  this.typeSpecifier = properties.typeSpecifier;\n}\n/**\n * Check if the conversion specification is a percent literal \"%%\".\n *\n * @ignore\n * @return {boolean} Returns true if the conversion is a percent literal, false otherwise.\n */\n\n\nConversionSpecification.prototype.isPercentLiteral = function () {\n  return LITERAL_PERCENT_SPECIFIER === this.percent;\n};\n/**\n * Get the padding character from padding specifier.\n *\n * @ignore\n * @returns {string} Returns the padding character.\n */\n\n\nConversionSpecification.prototype.getPaddingCharacter = function () {\n  var paddingCharacter = nilDefault(this.paddingSpecifier, ' ');\n\n  if (paddingCharacter.length === 2 && paddingCharacter[0] === LITERAL_SINGLE_QUOTE) {\n    paddingCharacter = paddingCharacter[1];\n  }\n\n  return paddingCharacter;\n};\n\n/**\n * Validates the specifier type and replacement position.\n *\n * @ignore\n * @throws {Error} Throws an exception on insufficient arguments or unknown specifier.\n * @param  {number} index The index of the matched specifier.\n * @param  {number} replacementsLength The number of replacements.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {undefined}\n */\n\nfunction validate(index, replacementsLength, conversion) {\n  if (isNil(conversion.typeSpecifier)) {\n    throw new Error('sprintf(): Unknown type specifier');\n  }\n\n  if (index > replacementsLength - 1) {\n    throw new Error('sprintf(): Too few arguments');\n  }\n\n  if (index < 0) {\n    throw new Error('sprintf(): Argument number must be greater than zero');\n  }\n}\n\n/**\n * Return the replacement for regular expression match of the conversion specification.\n *\n * @ignore\n * @name matchReplacement\n * @param {ReplacementIndex} replacementIndex The replacement index object.\n * @param {string[]} replacements The array of replacements.\n * @param {string} conversionSpecification The conversion specification.\n * @param {string} percent The percent characters from conversion specification.\n * @param {string} position The position to insert the replacement.\n * @param {string} signSpecifier The sign specifier to force a sign to be used on a number.\n * @param {string} paddingSpecifier The padding specifier that says what padding character will be used.\n * @param {string} alignmentSpecifier The alignment specifier that says if the result should be left-justified or right-justified.\n * @param {string} widthSpecifier The width specifier how many characters this conversion should result in.\n * @param {string} precisionSpecifier The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n * @param {string} typeSpecifier The type specifier says what type the argument data should be treated as.\n * @return {string} Returns the computed replacement.\n */\n\nfunction match(replacementIndex, replacements, conversionSpecification, percent, position, signSpecifier, paddingSpecifier, alignmentSpecifier, widthSpecifier, precisionSpecifier, typeSpecifier) {\n  var conversion = new ConversionSpecification({\n    percent: percent,\n    signSpecifier: signSpecifier,\n    paddingSpecifier: paddingSpecifier,\n    alignmentSpecifier: alignmentSpecifier,\n    width: coerceToNumber(widthSpecifier, null),\n    precision: coerceToNumber(precisionSpecifier, null),\n    typeSpecifier: typeSpecifier\n  });\n\n  if (conversion.isPercentLiteral()) {\n    return conversionSpecification.slice(1);\n  }\n\n  var actualReplacementIndex = replacementIndex.getIndexByPosition(position);\n  replacementIndex.incrementOnEmptyPosition(position);\n  validate(actualReplacementIndex, replacements.length, conversion);\n  return compute(replacements[actualReplacementIndex], conversion);\n}\n\n/**\n * Produces a string according to `format`.\n *\n * <div id=\"sprintf-format\" class=\"smaller\">\n * `format` string is composed of zero or more directives: ordinary characters (not <code>%</code>), which are  copied  unchanged\n * to  the  output string and <i>conversion specifications</i>, each of which results in fetching zero or more subsequent\n * arguments. <br/> <br/>\n *\n * Each <b>conversion specification</b> is introduced by the character <code>%</code>, and ends with a <b>conversion\n * specifier</b>. In between there may be (in this order) zero or more <b>flags</b>, an optional <b>minimum field width</b>\n * and an optional <b>precision</b>.<br/>\n * The syntax is: <b>ConversionSpecification</b> = <b>\"%\"</b> { <b>Flags</b> }\n * [ <b>MinimumFieldWidth</b> ] [ <b>Precision</b> ] <b>ConversionSpecifier</b>, where curly braces { } denote repetition\n * and square brackets [ ] optionality. <br/><br/>\n *\n * By default, the arguments are used in the given order.<br/>\n * For argument numbering and swapping, `%m$` (where `m` is a number indicating the argument order)\n * is used instead of `%` to specify explicitly which argument is taken. For instance `%1$s` fetches the 1st argument,\n * `%2$s` the 2nd and so on, no matter what position  the conversion specification has in `format`.\n * <br/><br/>\n *\n * <b>The flags</b><br/>\n * The character <code>%</code> is followed by zero or more of the following flags:<br/>\n * <table class=\"light-params\">\n *   <tr>\n *     <td><code>+</code></td>\n *     <td>\n *       A  sign (<code>+</code> or <code>-</code>) should always be placed before a number produced by a\n *       signed conversion. By default a sign is used only for negative numbers.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td><code>0</code></td>\n *     <td>The value should be zero padded.</td>\n *   </tr>\n *   <tr>\n *     <td><code>&blank;</code></td>\n *     <td>(a space) The value should be space padded.</td>\n *   </tr>\n *   <tr>\n *    <td><code>'</code></td>\n *    <td>Indicates alternate padding character, specified by prefixing it with a single quote <code>'</code>.</td>\n *   </tr>\n *   <tr>\n *     <td><code>-</code></td>\n *     <td>The converted value is to be left adjusted on the field boundary (the default is right justification).</td>\n *   </tr>\n * </table>\n *\n * <b>The minimum field width</b><br/>\n * An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted\n * value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the\n * left-adjustment flag has been given).<br/><br/>\n *\n * <b>The precision</b><br/>\n * An optional precision, in the form of a period `.` followed by an optional decimal digit string.<br/>\n * This gives the number of digits to appear after the radix character for `e`, `E`, `f` and `F` conversions, the\n * maximum number of significant digits for `g` and `G` conversions or the maximum number of characters to be printed\n * from a string for `s` conversion.<br/><br/>\n *\n * <b>The conversion specifier</b><br/>\n * A specifier that mentions what type the argument should be treated as:\n *\n * <table class=\"light-params\">\n *   <tr>\n *     <td>`s`</td>\n *     <td>The string argument is treated as and presented as a string.</td>\n *   </tr>\n *   <tr>\n *     <td>`d` `i`</td>\n *     <td>The integer argument is converted to signed decimal notation.</td>\n *   </tr>\n *   <tr>\n *     <td>`b`</td>\n *     <td>The unsigned integer argument is converted to unsigned binary.</td>\n *   </tr>\n *   <tr>\n *     <td>`c`</td>\n *     <td>The unsigned integer argument is converted to an ASCII character with that number.</td>\n *   </tr>\n *   <tr>\n *     <td>`o`</td>\n *     <td>The unsigned integer argument is converted to unsigned octal.</td>\n *   </tr>\n *   <tr>\n *     <td>`u`</td>\n *     <td>The unsigned integer argument is converted to unsigned decimal.</td>\n *   </tr>\n *   <tr>\n *     <td>`x` `X`</td>\n *     <td>The unsigned integer argument is converted to unsigned hexadecimal. The letters `abcdef` are used for `x`\n *     conversions; the letters `ABCDEF` are used for `X` conversions.</td>\n *   </tr>\n *   <tr>\n *     <td>`f`</td>\n *     <td>\n *      The float argument is rounded and converted to decimal notation in the style `[-]ddd.ddd`, where the number of\n *      digits after the decimal-point character is equal to the precision specification. If the precision is missing,\n *      it is taken as 6; if the precision is explicitly zero, no decimal-point character appears.\n *      If a decimal point appears, at least one digit appears before it.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`e` `E`</td>\n *     <td>\n *       The float argument is rounded and converted in the style `[-]d.ddde±dd`, where there is one digit\n *       before the decimal-point character and the number of digits after it is equal to the precision. If\n *       the precision is missing, it is taken as `6`; if the precision is zero, no decimal-point character\n *       appears. An `E` conversion uses the letter `E` (rather than `e`) to introduce the exponent.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`g` `G`</td>\n *     <td>\n *       The float argument is converted in style `f` or `e` (or `F` or `E` for `G` conversions). The precision specifies\n *       the number of significant digits. If the precision is missing, `6` digits are given; if the\n *       precision is zero, it is treated as `1`. Style `e` is used if the exponent from its conversion is less\n *       than `-6` or greater than or equal to the precision. Trailing zeros are removed from the fractional\n *       part of the result; a decimal point appears only if it is followed by at least one digit.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`%`</td>\n *     <td>A literal `%` is written. No argument is converted. The complete conversion specification is `%%`.</td>\n *   </tr>\n *\n * </table>\n * </div>\n *\n * @function sprintf\n * @static\n * @since 1.0.0\n * @memberOf Format\n * @param  {string} [format=''] The format string.\n * @param  {...*}               replacements The replacements to produce the string.\n * @return {string}             Returns the produced string.\n * @example\n * v.sprintf('%s, %s!', 'Hello', 'World');\n * // => 'Hello World!'\n *\n * v.sprintf('%s costs $%d', 'coffee', 2);\n * // => 'coffee costs $2'\n *\n * v.sprintf('%1$s %2$s %1$s %2$s, watcha gonna %3$s', 'bad', 'boys', 'do')\n * // => 'bad boys bad boys, watcha gonna do'\n *\n * v.sprintf('% 6s', 'bird');\n * // => '  bird'\n *\n * v.sprintf('% -6s', 'crab');\n * // => 'crab  '\n *\n * v.sprintf(\"%'*5s\", 'cat');\n * // => '**cat'\n *\n * v.sprintf(\"%'*-6s\", 'duck');\n * // => 'duck**'\n *\n * v.sprintf('%d %i %+d', 15, -2, 25);\n * // => '15 -2 +25'\n *\n * v.sprintf(\"%06d\", 15);\n * // => '000015'\n *\n * v.sprintf('0b%b 0o%o 0x%X', 12, 9, 155);\n * // => '0b1100 0o11 0x9B'\n *\n * v.sprintf('%.2f', 10.469);\n * // => '10.47'\n *\n * v.sprintf('%.2e %g', 100.5, 0.455);\n * // => '1.01e+2 0.455'\n *\n */\n\nfunction sprintf(format) {\n  var formatString = coerceToString(format);\n\n  if (formatString === '') {\n    return formatString;\n  }\n\n  for (var _len = arguments.length, replacements = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    replacements[_key - 1] = arguments[_key];\n  }\n\n  var boundReplacementMatch = match.bind(undefined, new ReplacementIndex(), replacements);\n  return formatString.replace(REGEXP_CONVERSION_SPECIFICATION, boundReplacementMatch);\n}\n\n/**\n * Produces a string according to `format`. Works exactly like <a href=\"#sprintf\"><code>sprintf()</code></a>,\n * with the only difference that accepts the formatting arguments in an array `values`.<br/>\n * See <a href=\"#sprintf-format\">here</a> `format` string specifications.\n *\n * @function vprintf\n * @static\n * @since 1.0.0\n * @memberOf Format\n * @param  {string} format='']  The format string.\n * @param  {Array} replacements The array of replacements to produce the string.\n * @return {string}             Returns the produced string.\n * @example\n * v.vprintf('%s', ['Welcome'])\n * // => 'Welcome'\n *\n * v.vprintf('%s has %d apples', ['Alexandra', 3]);\n * // => 'Alexandra has 3 apples'\n */\n\nfunction vprintf(format, replacements) {\n  return sprintf.apply(void 0, [format].concat(_toConsumableArray(nilDefault(replacements, []))));\n}\n\nvar escapeCharactersMap = {\n  '<': '&lt;',\n  '>': '&gt;',\n  '&': '&amp;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n/**\n * Return the escaped version of `character`.\n *\n * @ignore\n * @param  {string} character The character to be escape.\n * @return {string}           The escaped version of character.\n */\n\nfunction replaceSpecialCharacter(character) {\n  return escapeCharactersMap[character];\n}\n/**\n * Escapes HTML special characters  <code>< > & ' \" `</code> in <code>subject</code>.\n *\n * @function escapeHtml\n * @static\n * @since 1.0.0\n * @memberOf Escape\n * @param {string} [subject=''] The string to escape.\n * @return {string} Returns the escaped string.\n * @example\n * v.escapeHtml('<p>wonderful world</p>');\n * // => '&lt;p&gt;wonderful world&lt;/p&gt;'\n */\n\n\nfunction escapeHtml(subject) {\n  return coerceToString(subject).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);\n}\n\n/**\n * Escapes the regular expression special characters `- [ ] / { } ( ) * + ? . \\ ^ $ |` in `subject`.\n *\n * @function escapeRegExp\n * @static\n * @since 1.0.0\n * @memberOf Escape\n * @param {string} [subject=''] The string to escape.\n * @return {string} Returns the escaped string.\n * @example\n * v.escapeRegExp('(hours)[minutes]{seconds}');\n * // => '\\(hours\\)\\[minutes\\]\\{seconds\\}'\n */\n\nfunction escapeRegExp(subject) {\n  return coerceToString(subject).replace(REGEXP_SPECIAL_CHARACTERS, '\\\\$&');\n}\n\nvar unescapeCharactersMap = {\n  '<': /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,\n  '>': /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,\n  '&': /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,\n  '\"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,\n  \"'\": /(&#x0*27;)|(&#0*39;)/gi,\n  '`': /(&#x0*60;)|(&#0*96;)/gi\n};\nvar characters = Object.keys(unescapeCharactersMap);\n/**\n * Replaces the HTML entities with corresponding characters.\n *\n * @ignore\n * @param  {string} string The accumulator string.\n * @param  {string} key    The character.\n * @return {string}        The string with replaced HTML entity\n */\n\nfunction reduceUnescapedString(string, key) {\n  return string.replace(unescapeCharactersMap[key], key);\n}\n/**\n * Unescapes HTML special characters from <code>&amp;lt; &amp;gt; &amp;amp; &amp;quot; &amp;#x27; &amp;#x60;</code>\n * to corresponding <code>< > & ' \" `</code> in <code>subject</code>.\n *\n * @function unescapeHtml\n * @static\n * @since 1.0.0\n * @memberOf Escape\n * @param  {string} [subject=''] The string to unescape.\n * @return {string}              Returns the unescaped string.\n * @example\n * v.unescapeHtml('&lt;p&gt;wonderful world&lt;/p&gt;');\n * // => '<p>wonderful world</p>'\n */\n\n\nfunction unescapeHtml(subject) {\n  var subjectString = coerceToString(subject);\n  return characters.reduce(reduceUnescapedString, subjectString);\n}\n\n/**\n * Returns the first occurrence index of `search` in `subject`.\n *\n * @function indexOf\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [fromIndex=0] The index to start searching.\n * @return {number} Returns the first occurrence index or `-1` if not found.\n * @example\n * v.indexOf('morning', 'n');\n * // => 3\n *\n * v.indexOf('evening', 'o');\n * // => -1\n */\n\nfunction indexOf(subject, search, fromIndex) {\n  var subjectString = coerceToString(subject);\n  return subjectString.indexOf(search, fromIndex);\n}\n\n/**\n * Returns the last occurrence index of `search` in `subject`.\n *\n * @function lastIndexOf\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [fromIndex=subject.length - 1] The index to start searching backward in the string.\n * @return {number} Returns the last occurrence index or `-1` if not found.\n * @example\n * v.lastIndexOf('morning', 'n');\n * // => 5\n *\n * v.lastIndexOf('evening', 'o');\n * // => -1\n */\n\nfunction lastIndexOf(subject, search, fromIndex) {\n  var subjectString = coerceToString(subject);\n  return subjectString.lastIndexOf(search, fromIndex);\n}\n\n/**\n * Returns the first index of a `pattern` match in `subject`.\n *\n * @function search\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string|RegExp} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern)`.\n * @param {number} [fromIndex=0] The index to start searching.\n * @return {number} Returns the first match index or `-1` if not found.\n * @example\n * v.search('morning', /rn/);\n * // => 2\n *\n * v.search('evening', '/\\d/');\n * // => -1\n */\n\nfunction search(subject, pattern, fromIndex) {\n  var subjectString = coerceToString(subject);\n  var fromIndexNumber = isNil(fromIndex) ? 0 : clipNumber(toInteger(fromIndex), 0, subjectString.length);\n  var matchIndex = subjectString.substr(fromIndexNumber).search(pattern);\n\n  if (matchIndex !== -1 && !isNaN(fromIndexNumber)) {\n    matchIndex += fromIndexNumber;\n  }\n\n  return matchIndex;\n}\n\n/**\n * Inserts into `subject` a string `toInsert` at specified `position`.\n *\n * @function insert\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string where to insert.\n * @param {string} [toInsert=''] The string to be inserted.\n * @param {number} [position=0] The position to insert.\n * @return {string} Returns the string after insertion.\n * @example\n * v.insert('ct', 'a', 1);\n * // => 'cat'\n *\n * v.insert('sunny', ' day', 5);\n * // => 'sunny day'\n */\n\nfunction insert(subject, toInsert, position) {\n  var subjectString = coerceToString(subject);\n  var toInsertString = coerceToString(toInsert);\n  var positionNumber = coerceToNumber(position);\n\n  if (positionNumber < 0 || positionNumber > subjectString.length || toInsertString === '') {\n    return subjectString;\n  }\n\n  return subjectString.slice(0, positionNumber) + toInsertString + subjectString.slice(positionNumber);\n}\n\n/**\n * Generated diacritics map. See bellow the base code.\n * @ignore\n * @type Object\n */\nvar diacritics = {\n  '3': '\\u039e\\u03be',\n  '8': '\\u0398\\u03b8',\n  A: '\\x41\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\u0100\\u0102\\u0104\\u01cd\\u01de\\u01e0\\u01fa\\u0200\\u0202\\u0226\\u023a\\u0386\\u0391\\u0410',\n  B: '\\x42\\u0181\\u0182\\u0243\\u0392\\u0411',\n  C: '\\x43\\xc7\\u0106\\u0108\\u010a\\u010c\\u0187\\u023b\\u0426',\n  D: '\\x44\\u010e\\u0110\\u0189\\u018a\\u018b\\xd0\\u0394\\u0414',\n  E: '\\x45\\xc8\\xc9\\xca\\xcb\\u0112\\u0114\\u0116\\u0118\\u011a\\u018e\\u0190\\u0204\\u0206\\u0228\\u0388\\u0395\\u0415\\u042d',\n  F: '\\x46\\u0191\\u03a6\\u0424',\n  G: '\\x47\\u011c\\u011e\\u0120\\u0122\\u0193\\u01e4\\u01e6\\u01f4\\u0393\\u0413\\u0490',\n  H: '\\x48\\u0124\\u0126\\u021e\\u0389\\u0397\\u0425',\n  I: '\\x49\\xcc\\xcd\\xce\\xcf\\u0128\\u012a\\u012c\\u012e\\u0130\\u0197\\u01cf\\u0208\\u020a\\u038a\\u0399\\u03aa\\u0406\\u0418',\n  J: '\\x4a\\u0134\\u0248\\u0419',\n  K: '\\x4b\\u0136\\u0198\\u01e8\\u039a\\u041a',\n  L: '\\x4c\\u0139\\u013b\\u013d\\u013f\\u0141\\u023d\\u039b\\u041b',\n  M: '\\x4d\\u019c\\u039c\\u041c',\n  N: '\\x4e\\xd1\\u0143\\u0145\\u0147\\u019d\\u01f8\\u0220\\u039d\\u041d',\n  O: '\\x4f\\xd2\\xd3\\xd4\\xd5\\xd6\\xd8\\u014c\\u014e\\u0150\\u0186\\u019f\\u01a0\\u01d1\\u01ea\\u01ec\\u01fe\\u020c\\u020e\\u022a\\u022c\\u022e\\u0230\\u038c\\u039f\\u041e',\n  P: '\\x50\\u01a4\\u03a0\\u041f',\n  Q: '\\x51\\u024a',\n  R: '\\x52\\u0154\\u0156\\u0158\\u0210\\u0212\\u024c\\u03a1\\u0420',\n  S: '\\x53\\u015a\\u015c\\u015e\\u0160\\u0218\\u03a3\\u0421',\n  T: '\\x54\\u0162\\u0164\\u0166\\u01ac\\u01ae\\u021a\\u023e\\u03a4\\u0422',\n  U: '\\x55\\xd9\\xda\\xdb\\xdc\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u01af\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u0214\\u0216\\u0244\\u0423\\u042a',\n  V: '\\x56\\u01b2\\u0245\\u0412',\n  W: '\\x57\\u0174\\u038f\\u03a9',\n  X: '\\x58\\u03a7',\n  Y: '\\x59\\xdd\\u0176\\u0178\\u01b3\\u0232\\u024e\\u038e\\u03a5\\u03ab\\u042b',\n  Z: '\\x5a\\u0179\\u017b\\u017d\\u01b5\\u0224\\u0396\\u0417',\n  a: '\\x61\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\u0101\\u0103\\u0105\\u01ce\\u01df\\u01e1\\u01fb\\u0201\\u0203\\u0227\\u0250\\u03ac\\u03b1\\u0430',\n  b: '\\x62\\u0180\\u0183\\u0253\\u03b2\\u0431',\n  c: '\\x63\\xe7\\u0107\\u0109\\u010b\\u010d\\u0188\\u023c\\u0446',\n  d: '\\x64\\u010f\\u0111\\u018c\\u0256\\u0257\\xf0\\u03b4\\u0434',\n  e: '\\x65\\xe8\\xe9\\xea\\xeb\\u0113\\u0115\\u0117\\u0119\\u011b\\u01dd\\u0205\\u0207\\u0229\\u0247\\u025b\\u03ad\\u03b5\\u0435\\u044d',\n  f: '\\x66\\u0192\\u03c6\\u0444',\n  g: '\\x67\\u011d\\u011f\\u0121\\u0123\\u01e5\\u01e7\\u01f5\\u0260\\u03b3\\u0433\\u0491',\n  h: '\\x68\\u0125\\u0127\\u021f\\u0265\\u03ae\\u03b7\\u0445',\n  i: '\\x69\\xec\\xed\\xee\\xef\\u0129\\u012b\\u012d\\u012f\\u0131\\u01d0\\u0209\\u020b\\u0268\\u0390\\u03af\\u03b9\\u03ca\\u0438\\u0456',\n  j: '\\x6a\\u0135\\u01f0\\u0249\\u0439',\n  k: '\\x6b\\u0137\\u0199\\u01e9\\u03ba\\u043a',\n  l: '\\x6c\\u013a\\u013c\\u013e\\u0140\\u0142\\u017f\\u019a\\u026b\\u03bb\\u043b',\n  m: '\\x6d\\u026f\\u0271\\u03bc\\u043c',\n  n: '\\x6e\\xf1\\u0144\\u0146\\u0148\\u0149\\u019e\\u01f9\\u0272\\u03bd\\u043d',\n  o: '\\x6f\\xf2\\xf3\\xf4\\xf5\\xf6\\xf8\\u014d\\u014f\\u0151\\u01a1\\u01d2\\u01eb\\u01ed\\u01ff\\u020d\\u020f\\u022b\\u022d\\u022f\\u0231\\u0254\\u0275\\u03bf\\u03cc\\u043e',\n  p: '\\x70\\u01a5\\u03c0\\u043f',\n  q: '\\x71\\u024b',\n  r: '\\x72\\u0155\\u0157\\u0159\\u0211\\u0213\\u024d\\u027d\\u03c1\\u0440',\n  s: '\\x73\\xdf\\u015b\\u015d\\u015f\\u0161\\u0219\\u023f\\u03c2\\u03c3\\u0441',\n  t: '\\x74\\u0163\\u0165\\u0167\\u01ad\\u021b\\u0288\\u03c4\\u0442',\n  u: '\\x75\\xf9\\xfa\\xfb\\xfc\\u0169\\u016b\\u016d\\u016f\\u0171\\u0173\\u01b0\\u01d4\\u01d6\\u01d8\\u01da\\u01dc\\u0215\\u0217\\u0289\\u0443\\u044a',\n  v: '\\x76\\u028b\\u028c\\u0432',\n  w: '\\x77\\u0175\\u03c9\\u03ce',\n  x: '\\x78\\u03c7',\n  y: '\\x79\\xfd\\xff\\u0177\\u01b4\\u0233\\u024f\\u03b0\\u03c5\\u03cb\\u03cd\\u044b',\n  z: '\\x7a\\u017a\\u017c\\u017e\\u01b6\\u0225\\u0240\\u03b6\\u0437',\n  OE: '\\x8c\\u0152',\n  oe: '\\x9c\\u0153',\n  AE: '\\xc6\\u01e2\\u01fc',\n  ae: '\\xe6\\u01e3\\u01fd',\n  hv: '\\u0195',\n  OI: '\\u01a2',\n  oi: '\\u01a3',\n  DZ: '\\u01c4\\u01f1',\n  Dz: '\\u01c5\\u01f2',\n  dz: '\\u01c6\\u01f3',\n  LJ: '\\u01c7',\n  Lj: '\\u01c8',\n  lj: '\\u01c9',\n  NJ: '\\u01ca',\n  Nj: '\\u01cb',\n  nj: '\\u01cc',\n  OU: '\\u0222',\n  ou: '\\u0223',\n  TH: '\\xde',\n  th: '\\xfe',\n  PS: '\\u03a8',\n  ps: '\\u03c8',\n  Yo: '\\u0401',\n  Ye: '\\u0404',\n  Yi: '\\u0407',\n  Zh: '\\u0416',\n  Ch: '\\u0427',\n  Sh: '\\u0428\\u0429',\n  '': '\\u042a\\u042c\\u044c',\n  Yu: '\\u042e',\n  Ya: '\\u042f',\n  zh: '\\u0436',\n  ch: '\\u0447',\n  sh: '\\u0448\\u0449',\n  yu: '\\u044e',\n  ya: '\\u044f',\n  yo: '\\u0451',\n  ye: '\\u0454',\n  yi: '\\u0457'\n};\nvar diacriticsMap = null;\n/**\n * Creates a map of the diacritics.\n *\n * @ignore\n * @returns {Object} Returns the diacritics map.\n */\n\nfunction getDiacriticsMap() {\n  if (diacriticsMap !== null) {\n    return diacriticsMap;\n  }\n\n  diacriticsMap = {};\n  Object.keys(diacritics).forEach(function (key) {\n    var characters = diacritics[key];\n\n    for (var index = 0; index < characters.length; index++) {\n      var character = characters[index];\n      diacriticsMap[character] = key;\n    }\n  });\n  return diacriticsMap;\n}\n/**\n * Get the latin character from character with diacritics.\n *\n * @ignore\n * @param   {string} character The character with diacritics.\n * @returns {string}           Returns the character without diacritics.\n */\n\n\nfunction getLatinCharacter(character) {\n  var characterWithoutDiacritic = getDiacriticsMap()[character];\n  return characterWithoutDiacritic ? characterWithoutDiacritic : character;\n}\n\n/**\n * Returns the `cleanCharacter` from combining marks regular expression match.\n *\n * @ignore\n * @param {string} character The character with combining marks\n * @param {string} cleanCharacter The character without combining marks.\n * @return {string} The character without combining marks.\n */\n\nfunction removeCombiningMarks(character, cleanCharacter) {\n  return cleanCharacter;\n}\n/**\n * Latinises the `subject` by removing diacritic characters.\n *\n * @function latinise\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to latinise.\n * @return {string} Returns the latinised string.\n * @example\n * v.latinise('cafe\\u0301'); // or 'café'\n * // => 'cafe'\n *\n * v.latinise('août décembre');\n * // => 'aout decembre'\n *\n * v.latinise('как прекрасен этот мир');\n * // => 'kak prekrasen etot mir'\n */\n\n\nfunction latinise(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  return subjectString.replace(REGEXP_NON_LATIN, getLatinCharacter).replace(REGEXP_COMBINING_MARKS, removeCombiningMarks);\n}\n\n/**\n * Pads `subject` to a new `length`.\n *\n * @function pad\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the padded string.\n * @example\n * v.pad('dog', 5);\n * // => ' dog '\n *\n * v.pad('bird', 6, '-');\n * // => '-bird-'\n *\n * v.pad('cat', 6, '-=');\n * // => '-cat-='\n */\n\nfunction pad(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n\n  var paddingLength = lengthInt - subjectString.length;\n  var paddingSideLength = toInteger(paddingLength / 2);\n  var paddingSideRemainingLength = paddingLength % 2;\n  return buildPadding(padString, paddingSideLength) + subjectString + buildPadding(padString, paddingSideLength + paddingSideRemainingLength);\n}\n\n/**\n * Replaces the matches of `search` with `replace`. <br/>\n *\n * @function replace\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to verify.\n * @param {string|RegExp} search The search pattern to replace. If `search` is a string,\n * a simple string match is evaluated and only the first occurrence replaced.\n * @param {string|Function} replace The string or function which invocation result replaces `search` match.\n * @return {string} Returns the replacement result.\n * @example\n * v.replace('swan', 'wa', 'u');\n * // => 'sun'\n *\n * v.replace('domestic duck', /domestic\\s/, '');\n * // => 'duck'\n *\n * v.replace('nice duck', /(nice)(duck)/, function(match, nice, duck) {\n *   return 'the ' + duck + ' is ' + nice;\n * });\n * // => 'the duck is nice'\n */\n\nfunction replace(subject, search, replace) {\n  var subjectString = coerceToString(subject);\n  return subjectString.replace(search, replace);\n}\n\n/**\n * Replaces all occurrences of `search` with `replace`. <br/>\n *\n * @function replaceAll\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to verify.\n * @param {string|RegExp} search The search pattern to replace. If `search` is a string, a simple string match is evaluated.\n * All matches are replaced.\n * @param {string|Function} replace The string or function which invocation result replaces all `search` matches.\n * @return {string} Returns the replacement result.\n * @example\n * v.replaceAll('good morning', 'o', '*');\n * // => 'g**d m*rning'\n * v.replaceAll('evening', /n/g, 's');\n * // => 'evesisg'\n *\n */\n\nfunction replaceAll(subject, search, replace) {\n  var subjectString = coerceToString(subject);\n\n  if (search instanceof RegExp) {\n    if (search.flags.indexOf('g') === -1) {\n      throw new TypeError('search argument is a non-global regular expression');\n    }\n\n    return subjectString.replace(search, replace);\n  }\n\n  var searchString = coerceToString(search);\n  var isFunctionalReplace = typeof replace === 'function';\n\n  if (!isFunctionalReplace) {\n    replace = coerceToString(replace);\n  }\n\n  var searchLength = searchString.length;\n\n  if (searchLength === 0) {\n    return replaceAll(subject, /(?:)/g, replace);\n  }\n\n  var advanceBy = searchLength > 1 ? searchLength : 1;\n  var matchPositions = [];\n  var position = subjectString.indexOf(searchString, 0);\n\n  while (position !== -1) {\n    matchPositions.push(position);\n    position = subjectString.indexOf(searchString, position + advanceBy);\n  }\n\n  var endOfLastMatch = 0;\n  var result = '';\n\n  for (var i = 0; i < matchPositions.length; i++) {\n    var _position = matchPositions[i];\n    var replacement = replace;\n\n    if (isFunctionalReplace) {\n      replacement = coerceToString(replace.call(undefined, searchString, _position, subjectString));\n    }\n\n    result += subjectString.slice(endOfLastMatch, _position) + replacement;\n    endOfLastMatch = _position + searchLength;\n  }\n\n  if (endOfLastMatch < subjectString.length) {\n    result += subjectString.slice(endOfLastMatch);\n  }\n\n  return result;\n}\n\n/**\n * Reverses the `subject`.\n *\n * @function reverse\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to reverse.\n * @return {string} Returns the reversed string.\n * @example\n * v.reverse('winter');\n * // => 'retniw'\n */\n\nfunction reverse(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('').reverse().join('');\n}\n\n/**\n * Reverses the `subject` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function reverseGrapheme\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to reverse.\n * @return {string} Returns the reversed string.\n * @example\n * v.reverseGrapheme('summer');\n * // => 'remmus'\n *\n * v.reverseGrapheme('𝌆 bar mañana mañana');\n * // => 'anañam anañam rab 𝌆'\n */\n\nfunction reverseGrapheme(subject) {\n  var subjectString = coerceToString(subject);\n  /**\n   * @see https://github.com/mathiasbynens/esrever\n   */\n\n  subjectString = subjectString.replace(REGEXP_COMBINING_MARKS, function ($0, $1, $2) {\n    return reverseGrapheme($2) + $1;\n  }).replace(REGEXP_SURROGATE_PAIRS, '$2$1');\n  var reversedString = '';\n  var index = subjectString.length;\n\n  while (index--) {\n    reversedString += subjectString.charAt(index);\n  }\n\n  return reversedString;\n}\n\n/**\n * Slugifies the `subject`. Cleans the `subject` by replacing diacritics with corresponding latin characters.\n *\n * @function slugify\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to slugify.\n * @return {string} Returns the slugified string.\n * @example\n * v.slugify('Italian cappuccino drink');\n * // => 'italian-cappuccino-drink'\n *\n * v.slugify('caffé latté');\n * // => 'caffe-latte'\n *\n * v.slugify('хорошая погода');\n * // => 'horoshaya-pogoda'\n */\n\nfunction slugify(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  var cleanSubjectString = latinise(subjectString).replace(REGEXP_NON_LATIN, '-');\n  return kebabCase(cleanSubjectString);\n}\n\n/**\n * Changes `subject` by deleting `deleteCount` of characters starting at position `start`. Places a new string\n * `toAdd` instead of deleted characters.\n *\n * @function splice\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string where to insert.\n * @param {string} start The position to start changing the string. For a negative position will start from the end of\n * the string.\n * @param {number} [deleteCount=subject.length-start] The number of characters to delete from string.\n * @param {string} [toAdd=''] The string to be added instead of deleted characters.\n * @return {string} Returns the modified string.\n * @example\n * v.splice('new year', 0, 4);\n * // => 'year'\n *\n * v.splice('new year', 0, 3, 'happy');\n * // => 'happy year'\n *\n * v.splice('new year', -4, 4, 'day');\n * // => 'new day'\n */\n\nfunction splice(subject, start, deleteCount, toAdd) {\n  var subjectString = coerceToString(subject);\n  var toAddString = coerceToString(toAdd);\n  var startPosition = coerceToNumber(start);\n\n  if (startPosition < 0) {\n    startPosition = subjectString.length + startPosition;\n\n    if (startPosition < 0) {\n      startPosition = 0;\n    }\n  } else if (startPosition > subjectString.length) {\n    startPosition = subjectString.length;\n  }\n\n  var deleteCountNumber = coerceToNumber(deleteCount, subjectString.length - startPosition);\n\n  if (deleteCountNumber < 0) {\n    deleteCountNumber = 0;\n  }\n\n  return subjectString.slice(0, startPosition) + toAddString + subjectString.slice(startPosition + deleteCountNumber);\n}\n\n/**\n * Translates characters or replaces substrings in `subject`.\n *\n * @function tr\n * @static\n * @since 1.3.0\n * @memberOf Manipulate\n * @param  {string} [subject=''] The string to translate.\n * @param  {string|Object} from The string of characters to translate from. Or an object, then the object keys are replaced with corresponding values (longest keys are tried first).\n * @param  {string} to The string of characters to translate to. Ignored when `from` is an object.\n * @return {string} Returns the translated string.\n * @example\n * v.tr('hello', 'el', 'ip');\n * // => 'hippo'\n *\n * v.tr('légèreté', 'éè', 'ee');\n * // => 'legerete'\n *\n * v.tr('Yes. The fire rises.', {\n *   'Yes': 'Awesome',\n *   'fire': 'flame'\n * })\n * // => 'Awesome. The flame rises.'\n *\n * v.tr(':where is the birthplace of :what', {\n *   ':where': 'Africa',\n *   ':what': 'Humanity'\n * });\n * // => 'Africa is the birthplace of Humanity'\n *\n */\n\nfunction tr(subject, from, to) {\n  var subjectString = coerceToString(subject);\n  var keys;\n  var values;\n\n  if (isString(from) && isString(to)) {\n    keys = from.split('');\n    values = to.split('');\n  } else {\n    var _extractKeysAndValues = extractKeysAndValues(nilDefault(from, {}));\n\n    var _extractKeysAndValues2 = _slicedToArray(_extractKeysAndValues, 2);\n\n    keys = _extractKeysAndValues2[0];\n    values = _extractKeysAndValues2[1];\n  }\n\n  var keysLength = keys.length;\n\n  if (keysLength === 0) {\n    return subjectString;\n  }\n\n  var result = '';\n  var valuesLength = values.length;\n\n  for (var index = 0; index < subjectString.length; index++) {\n    var isMatch = false;\n    var matchValue = void 0;\n\n    for (var keyIndex = 0; keyIndex < keysLength && keyIndex < valuesLength; keyIndex++) {\n      var key = keys[keyIndex];\n\n      if (subjectString.substr(index, key.length) === key) {\n        isMatch = true;\n        matchValue = values[keyIndex];\n        index = index + key.length - 1;\n        break;\n      }\n    }\n\n    result += isMatch ? matchValue : subjectString[index];\n  }\n\n  return result;\n}\n\nfunction extractKeysAndValues(object) {\n  var keys = Object.keys(object);\n  var values = keys.sort(sortStringByLength).map(function (key) {\n    return object[key];\n  });\n  return [keys, values];\n}\n\nfunction sortStringByLength(str1, str2) {\n  if (str1.length === str2.length) {\n    return 0;\n  }\n\n  return str1.length < str2.length ? 1 : -1;\n}\n\n/**\n * Checks whether `subject` includes `search` starting from `position`.\n *\n * @function includes\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [position=0] The position to start searching.\n * @return {boolean} Returns `true` if `subject` includes `search` or `false` otherwise.\n * @example\n * v.includes('starship', 'star');\n * // => true\n *\n * v.includes('galaxy', 'g', 1);\n * // => false\n */\n\nfunction includes(subject, search, position) {\n  var subjectString = coerceToString(subject);\n  var searchString = toString(search);\n\n  if (searchString === null) {\n    return false;\n  }\n\n  if (searchString === '') {\n    return true;\n  }\n\n  position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n  return subjectString.indexOf(searchString, position) !== -1;\n}\n\nvar reduce$1 = Array.prototype.reduce;\n/**\n * Removes whitespaces from the left side of the `subject`.\n *\n * @function trimLeft\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trimLeft('  Starship Troopers');\n * // => 'Starship Troopers'\n *\n * v.trimLeft('***Mobile Infantry', '*');\n * // => 'Mobile Infantry'\n */\n\nfunction trimLeft(subject, whitespace) {\n  var subjectString = coerceToString(subject);\n\n  if (whitespace === '' || subjectString === '') {\n    return subjectString;\n  }\n\n  var whitespaceString = toString(whitespace);\n\n  if (isNil(whitespaceString)) {\n    return subjectString.replace(REGEXP_TRIM_LEFT, '');\n  }\n\n  var matchWhitespace = true;\n  return reduce$1.call(subjectString, function (trimmed, character) {\n    if (matchWhitespace && includes(whitespaceString, character)) {\n      return trimmed;\n    }\n\n    matchWhitespace = false;\n    return trimmed + character;\n  }, '');\n}\n\nvar reduceRight = Array.prototype.reduceRight;\n/**\n * Removes whitespaces from the right side of the `subject`.\n *\n * @function trimRight\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trimRight('the fire rises   ');\n * // => 'the fire rises'\n *\n * v.trimRight('do you feel in charge?!!!', '!');\n * // => 'do you feel in charge?'\n */\n\nfunction trimRight(subject, whitespace) {\n  var subjectString = coerceToString(subject);\n\n  if (whitespace === '' || subjectString === '') {\n    return subjectString;\n  }\n\n  var whitespaceString = toString(whitespace);\n\n  if (isNil(whitespaceString)) {\n    return subjectString.replace(REGEXP_TRIM_RIGHT, '');\n  }\n\n  var matchWhitespace = true;\n  return reduceRight.call(subjectString, function (trimmed, character) {\n    if (matchWhitespace && includes(whitespaceString, character)) {\n      return trimmed;\n    }\n\n    matchWhitespace = false;\n    return character + trimmed;\n  }, '');\n}\n\n/**\n * Removes whitespaces from left and right sides of the `subject`.\n *\n * @function trim\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trim(' Mother nature ');\n * // => 'Mother nature'\n *\n * v.trim('--Earth--', '-');\n * // => 'Earth'\n */\n\nfunction trim(subject, whitespace) {\n  var subjectString = coerceToString(subject);\n\n  if (whitespace === '' || subjectString === '') {\n    return subjectString;\n  }\n\n  var whitespaceString = toString(whitespace);\n\n  if (isNil(whitespaceString)) {\n    return subjectString.trim();\n  }\n\n  return trimRight(trimLeft(subjectString, whitespaceString), whitespaceString);\n}\n\nvar OPTION_WIDTH = 'width';\nvar OPTION_NEW_LINE = 'newLine';\nvar OPTION_INDENT = 'indent';\nvar OPTION_CUT = 'cut';\n/**\n * Wraps `subject` to a given number of characters using a string break character.\n *\n * @function wordWrap\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param  {string} [subject=''] The string to wrap.\n * @param  {Object} [options={}] The wrap options.\n * @param  {number} [options.width=75] The number of characters at which to wrap.\n * @param  {string} [options.newLine='\\n'] The string to add at the end of line.\n * @param  {string} [options.indent='']  The string to intend the line.\n * @param  {boolean} [options.cut=false] When `false` (default) does not split the word even if word length is bigger than `width`. <br/>\n *                                       When `true` breaks the word that has length bigger than `width`.\n *\n * @return {string} Returns wrapped string.\n * @example\n * v.wordWrap('Hello world', {\n *   width: 5\n * });\n * // => 'Hello\\nworld'\n *\n * v.wordWrap('Hello world', {\n *   width: 5,\n *   newLine: '<br/>',\n *   indent: '__'\n * });\n * // => '__Hello<br/>__world'\n *\n * v.wordWrap('Wonderful world', {\n *   width: 5,\n *   cut: true\n * });\n * // => 'Wonde\\nrful\\nworld'\n *\n */\n\nfunction wordWrap(subject) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var subjectString = coerceToString(subject);\n\n  var _determineOptions = determineOptions(options),\n      width = _determineOptions.width,\n      newLine = _determineOptions.newLine,\n      indent = _determineOptions.indent,\n      cut = _determineOptions.cut;\n\n  if (subjectString === '' || width <= 0) {\n    return indent;\n  }\n\n  var subjectLength = subjectString.length;\n  var substring = subjectString.substring.bind(subjectString);\n  var offset = 0;\n  var wrappedLine = '';\n\n  while (subjectLength - offset > width) {\n    if (subjectString[offset] === ' ') {\n      offset++;\n      continue;\n    }\n\n    var spaceToWrapAt = subjectString.lastIndexOf(' ', width + offset);\n\n    if (spaceToWrapAt >= offset) {\n      wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n      offset = spaceToWrapAt + 1;\n    } else {\n      if (cut) {\n        wrappedLine += indent + substring(offset, width + offset) + newLine;\n        offset += width;\n      } else {\n        spaceToWrapAt = subjectString.indexOf(' ', width + offset);\n\n        if (spaceToWrapAt >= 0) {\n          wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n          offset = spaceToWrapAt + 1;\n        } else {\n          wrappedLine += indent + substring(offset);\n          offset = subjectLength;\n        }\n      }\n    }\n  }\n\n  if (offset < subjectLength) {\n    wrappedLine += indent + substring(offset);\n  }\n\n  return wrappedLine;\n}\n/**\n * Determine the word wrap options. The missing values are filled with defaults.\n *\n * @param  {Object} options  The options object.\n * @return {Object}          The word wrap options, with default settings if necessary.\n * @ignore\n */\n\nfunction determineOptions(options) {\n  return {\n    width: coerceToNumber(options[OPTION_WIDTH], 75),\n    newLine: coerceToString(options[OPTION_NEW_LINE], '\\n'),\n    indent: coerceToString(options[OPTION_INDENT], ''),\n    cut: coerceToBoolean(options[OPTION_CUT], false)\n  };\n}\n\n/**\n * Checks whether `subject` ends with `end`.\n *\n * @function endsWith\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {string} end The ending string.\n * @param {number} [position=subject.length] Search within `subject` as if the string were only `position` long.\n * @return {boolean} Returns `true` if `subject` ends with `end` or `false` otherwise.\n * @example\n * v.endsWith('red alert', 'alert');\n * // => true\n *\n * v.endsWith('metro south', 'metro');\n * // => false\n *\n * v.endsWith('Murphy', 'ph', 5);\n * // => true\n */\n\nfunction endsWith(subject, end, position) {\n  if (isNil(end)) {\n    return false;\n  }\n\n  var subjectString = coerceToString(subject);\n  var endString = coerceToString(end);\n\n  if (endString === '') {\n    return true;\n  }\n\n  position = isNil(position) ? subjectString.length : clipNumber(toInteger(position), 0, subjectString.length);\n  position -= endString.length;\n  var lastIndex = subjectString.indexOf(endString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n/**\n * Checks whether `subject` contains only alpha characters.\n *\n * @function isAlpha\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only alpha characters or `false` otherwise.\n * @example\n * v.isAlpha('bart');\n * // => true\n *\n * v.isAlpha('lisa!');\n * // => false\n *\n * v.isAlpha('lisa and bart');\n * // => false\n */\n\nfunction isAlpha(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_ALPHA.test(subjectString);\n}\n\n/**\n * Checks whether `subject` contains only alpha and digit characters.\n *\n * @function isAlphaDigit\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only alpha and digit characters or `false` otherwise.\n * @example\n * v.isAlphaDigit('year2020');\n * // => true\n *\n * v.isAlphaDigit('1448');\n * // => true\n *\n * v.isAlphaDigit('40-20');\n * // => false\n */\n\nfunction isAlphaDigit(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_ALPHA_DIGIT.test(subjectString);\n}\n\n/**\n * Checks whether `subject` is empty or contains only whitespaces.\n *\n * @function isBlank\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is empty or contains only whitespaces or `false` otherwise.\n * @example\n * v.isBlank('');\n * // => true\n *\n * v.isBlank('  ');\n * // => true\n *\n * v.isBlank('World');\n * // => false\n */\n\nfunction isBlank(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.trim().length === 0;\n}\n\n/**\n * Checks whether `subject` contains only digit characters.\n *\n * @function isDigit\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only digit characters or `false` otherwise.\n * @example\n * v.isDigit('35');\n * // => true\n *\n * v.isDigit('1.5');\n * // => false\n *\n * v.isDigit('ten');\n * // => false\n */\n\nfunction isDigit(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_DIGIT.test(subjectString);\n}\n\n/**\n * Checks whether `subject` is empty.\n *\n * @function isEmpty\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is empty or `false` otherwise\n * @example\n * v.isEmpty('');\n * // => true\n *\n * v.isEmpty('  ');\n * // => false\n *\n * v.isEmpty('sun');\n * // => false\n */\n\nfunction isEmpty(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.length === 0;\n}\n\n/**\n * Checks whether `subject` has only lower case characters.\n *\n * @function isLowerCase\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is lower case or `false` otherwise.\n * @example\n * v.isLowerCase('motorcycle');\n * // => true\n *\n * v.isLowerCase('John');\n * // => false\n *\n * v.isLowerCase('T1000');\n * // => false\n */\n\nfunction isLowerCase(subject) {\n  var valueString = coerceToString(subject);\n  return isAlpha(valueString) && valueString.toLowerCase() === valueString;\n}\n\n/**\n * Checks whether `subject` is numeric.\n *\n * @function isNumeric\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is numeric or `false` otherwise.\n * @example\n * v.isNumeric('350');\n * // => true\n *\n * v.isNumeric('-20.5');\n * // => true\n *\n * v.isNumeric('1.5E+2');\n * // => true\n *\n * v.isNumeric('five');\n * // => false\n */\n\nfunction isNumeric(subject) {\n  var valueNumeric = typeof subject === 'object' && !isNil(subject) ? Number(subject) : subject;\n  return (typeof valueNumeric === 'number' || typeof valueNumeric === 'string') && !isNaN(valueNumeric - parseFloat(valueNumeric));\n}\n\n/**\n * Checks whether `subject` contains only upper case characters.\n *\n * @function isUpperCase\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is upper case or `false` otherwise.\n * @example\n * v.isUpperCase('ACDC');\n * // => true\n *\n * v.isUpperCase('Morning');\n * // => false\n */\n\nfunction isUpperCase(subject) {\n  var subjectString = coerceToString(subject);\n  return isAlpha(subjectString) && subjectString.toUpperCase() === subjectString;\n}\n\n/**\n * Checks whether `subject` matches the regular expression `pattern`.\n *\n * @function matches\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {RegExp|string} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {boolean} Returns `true` if `subject` matches `pattern` or `false` otherwise.\n * @example\n * v.matches('pluto', /plu.{2}/);\n * // => true\n *\n * v.matches('sun', 'S', 'i');\n * // => true\n *\n * v.matches('apollo 11', '\\\\d{3}');\n * // => false\n */\n\nfunction matches(subject, pattern, flags) {\n  var subjectString = coerceToString(subject);\n  var flagsString = coerceToString(flags);\n  var patternString;\n\n  if (!(pattern instanceof RegExp)) {\n    patternString = toString(pattern);\n\n    if (patternString === null) {\n      return false;\n    }\n\n    pattern = new RegExp(patternString, flagsString);\n  }\n\n  return pattern.test(subjectString);\n}\n\n/**\n * Checks whether `subject` starts with `start`.\n *\n * @function startsWith\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {string} start The starting string.\n * @param {number} [position=0] The position to start searching.\n * @return {boolean} Returns `true` if `subject` starts with `start` or `false` otherwise.\n * @example\n * v.startsWith('say hello to my little friend', 'say hello');\n * // => true\n *\n * v.startsWith('tony', 'on', 1);\n * // => true\n *\n * v.startsWith('the world is yours', 'world');\n * // => false\n */\n\nfunction startsWith(subject, start, position) {\n  var subjectString = coerceToString(subject);\n  var startString = toString(start);\n\n  if (startString === null) {\n    return false;\n  }\n\n  if (startString === '') {\n    return true;\n  }\n\n  position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n  return subjectString.substr(position, startString.length) === startString;\n}\n\n/**\n * Splits `subject` into an array of characters.\n *\n * @function chars\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @return {Array} Returns the array of characters.\n * @example\n * v.chars('cloud');\n * // => ['c', 'l', 'o', 'u', 'd']\n */\n\nfunction chars(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('');\n}\n\n/**\n * Returns an array of Unicode code point values from characters of `subject`.\n *\n * @function codePoints\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param  {string} [subject=''] The string to extract from.\n * @return {Array} Returns an array of non-negative numbers less than or equal to `0x10FFFF`.\n * @example\n * v.codePoints('rain');\n * // => [114, 97, 105, 110], or\n * //    [0x72, 0x61, 0x69, 0x6E]\n *\n * v.codePoints('\\uD83D\\uDE00 smile'); // or '😀 smile'\n * // => [128512, 32, 115, 109, 105, 108, 101], or\n * //    [0x1F600, 0x20, 0x73, 0x6D, 0x69, 0x6C, 0x65]\n */\n\nfunction codePoints(subject) {\n  var subjectString = coerceToString(subject);\n  var subjectStringLength = subjectString.length;\n  var codePointArray = [];\n  var index = 0;\n  var codePointNumber;\n\n  while (index < subjectStringLength) {\n    codePointNumber = codePointAt(subjectString, index);\n    codePointArray.push(codePointNumber);\n    index += codePointNumber > 0xffff ? 2 : 1;\n  }\n\n  return codePointArray;\n}\n\n/**\n * Splits `subject` into an array of graphemes taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function graphemes\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @return {Array} Returns the array of graphemes.\n * @example\n * v.graphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n * // => ['\\uD835\\uDC00', '\\uD835\\uDC01'], or\n * //    ['𝐀', '𝐁']\n *\n * v.graphemes('cafe\\u0301'); // or 'café'\n * // => ['c', 'a', 'f', 'e\\u0301'], or\n * //    ['c', 'a', 'f', 'é']\n */\n\nfunction graphemes(subject) {\n  var subjectString = coerceToString(subject);\n  return nilDefault(subjectString.match(REGEXP_UNICODE_CHARACTER), []);\n}\n\n/**\n * Splits `subject` into an array of chunks by `separator`.\n *\n * @function split\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @param {string|RegExp} [separator] The pattern to match the separator.\n * @param {number} [limit] Limit the number of chunks to be found.\n * @return {Array} Returns the array of chunks.\n * @example\n * v.split('rage against the dying of the light', ' ');\n * // => ['rage', 'against', 'the', 'dying', 'of', 'the', 'light']\n *\n * v.split('the dying of the light', /\\s/, 3);\n * // => ['the', 'dying', 'of']\n */\n\nfunction split(subject, separator, limit) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split(separator, limit);\n}\n\nvar BYRE_ORDER_MARK = '\\uFEFF';\n/**\n * Strips the byte order mark (BOM) from the beginning of `subject`.\n *\n * @function stripBom\n * @static\n * @since 1.2.0\n * @memberOf Strip\n * @param {string} [subject=''] The string to strip from.\n * @return {string} Returns the stripped string.\n * @example\n *\n * v.stripBom('\\uFEFFsummertime sadness');\n * // => 'summertime sadness'\n *\n * v.stripBom('summertime happiness');\n * // => 'summertime happiness'\n *\n */\n\nfunction trim$1(subject) {\n  var subjectString = coerceToString(subject);\n\n  if (subjectString === '') {\n    return '';\n  }\n\n  if (subjectString[0] === BYRE_ORDER_MARK) {\n    return subjectString.substring(1);\n  }\n\n  return subjectString;\n}\n\n/**\n * Checks whether `subject` contains substring at specific `index`.\n *\n * @ignore\n * @param {string} subject The subject to search in.\n * @param {string} substring The substring to search/\n * @param {number} index The index to search substring.\n * @param {boolean} lookBehind Whether to look behind (true) or ahead (false).\n * @return {boolean} Returns a boolean whether the substring exists.\n */\nfunction hasSubstringAtIndex(subject, substring, index) {\n  var lookBehind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var indexOffset = 0;\n\n  if (lookBehind) {\n    indexOffset = -substring.length + 1;\n  }\n\n  var extractedSubstring = subject.substr(index + indexOffset, substring.length);\n  return extractedSubstring.toLowerCase() === substring;\n}\n\n/**\n * Parses the tags from the string '<tag1><tag2>...<tagN>'.\n *\n * @ignore\n * @param {string} tags The string that contains the tags.\n * @return {string[]} Returns the array of tag names.\n */\n\nfunction parseTagList(tags) {\n  var tagsList = [];\n  var match;\n\n  while ((match = REGEXP_TAG_LIST.exec(tags)) !== null) {\n    tagsList.push(match[1]);\n  }\n\n  return tagsList;\n}\n\nvar STATE_START_TAG = 0;\nvar STATE_NON_WHITESPACE = 1;\nvar STATE_DONE = 2;\n/**\n * Parses the tag name from html content.\n *\n * @ignore\n * @param {string} tagContent The tag content.\n * @return {string} Returns the tag name.\n */\n\nfunction parseTagName(tagContent) {\n  var state = STATE_START_TAG;\n  var tagName = '';\n  var index = 0;\n\n  while (state !== STATE_DONE) {\n    var char = tagContent[index++].toLowerCase();\n\n    switch (char) {\n      case '<':\n        break;\n\n      case '>':\n        state = STATE_DONE;\n        break;\n\n      default:\n        if (REGEXP_WHITESPACE.test(char)) {\n          if (state === STATE_NON_WHITESPACE) {\n            state = STATE_DONE;\n          }\n        } else {\n          if (state === STATE_START_TAG) {\n            state = STATE_NON_WHITESPACE;\n          }\n\n          if (char !== '/') {\n            tagName += char;\n          }\n        }\n\n        break;\n    }\n  }\n\n  return tagName;\n}\n\nvar STATE_OUTPUT = 0;\nvar STATE_HTML = 1;\nvar STATE_EXCLAMATION = 2;\nvar STATE_COMMENT = 3;\n/**\n * Strips HTML tags from `subject`.\n *\n * @function stripTags\n * @static\n * @since 1.1.0\n * @memberOf Strip\n * @param {string} [subject=''] The string to strip from.\n * @param {string|Array} [allowableTags] The string `'<tag1><tag2>'` or array `['tag1', 'tag2']` of tags that should not be stripped.\n * @param {string} [replacement=''] The string to replace the stripped tag.\n * @return {string} Returns the stripped string.\n * @example\n *\n * v.stripTags('<span><a href=\"#\">Summer</a> is nice</span>');\n * // => 'Summer is nice'\n *\n * v.stripTags('<span><i>Winter</i> is <b>cold</b></span>', ['b', 'i']);\n * // => '<i>Winter</i> is <b>cold</b>'\n *\n * v.stripTags('Sun<br/>set', '', '-');\n * // => 'Sun-set'\n */\n\nfunction trim$2(subject, allowableTags, replacement) {\n  subject = coerceToString(subject);\n\n  if (subject === '') {\n    return '';\n  }\n\n  if (!Array.isArray(allowableTags)) {\n    var allowableTagsString = coerceToString(allowableTags);\n    allowableTags = allowableTagsString === '' ? [] : parseTagList(allowableTagsString);\n  }\n\n  var replacementString = coerceToString(replacement);\n  var length = subject.length;\n  var hasAllowableTags = allowableTags.length > 0;\n  var hasSubstring = hasSubstringAtIndex.bind(null, subject);\n  var state = STATE_OUTPUT;\n  var depth = 0;\n  var output = '';\n  var tagContent = '';\n  var quote = null;\n\n  for (var index = 0; index < length; index++) {\n    var char = subject[index];\n    var advance = false;\n\n    switch (char) {\n      case '<':\n        if (quote) {\n          break;\n        }\n\n        if (hasSubstring('< ', index, false)) {\n          advance = true;\n          break;\n        }\n\n        if (state === STATE_OUTPUT) {\n          advance = true;\n          state = STATE_HTML;\n          break;\n        }\n\n        if (state === STATE_HTML) {\n          depth++;\n          break;\n        }\n\n        advance = true;\n        break;\n\n      case '!':\n        if (state === STATE_HTML && hasSubstring('<!', index)) {\n          state = STATE_EXCLAMATION;\n          break;\n        }\n\n        advance = true;\n        break;\n\n      case '-':\n        if (state === STATE_EXCLAMATION && hasSubstring('!--', index)) {\n          state = STATE_COMMENT;\n          break;\n        }\n\n        advance = true;\n        break;\n\n      case '\"':\n      case \"'\":\n        if (state === STATE_HTML) {\n          if (quote === char) {\n            quote = null;\n          } else if (!quote) {\n            quote = char;\n          }\n        }\n\n        advance = true;\n        break;\n\n      case 'E':\n      case 'e':\n        if (state === STATE_EXCLAMATION && hasSubstring('doctype', index)) {\n          state = STATE_HTML;\n          break;\n        }\n\n        advance = true;\n        break;\n\n      case '>':\n        if (depth > 0) {\n          depth--;\n          break;\n        }\n\n        if (quote) {\n          break;\n        }\n\n        if (state === STATE_HTML) {\n          quote = null;\n          state = STATE_OUTPUT;\n\n          if (hasAllowableTags) {\n            tagContent += '>';\n            var tagName = parseTagName(tagContent);\n\n            if (allowableTags.indexOf(tagName.toLowerCase()) !== -1) {\n              output += tagContent;\n            } else {\n              output += replacementString;\n            }\n\n            tagContent = '';\n          } else {\n            output += replacementString;\n          }\n\n          break;\n        }\n\n        if (state === STATE_EXCLAMATION || state === STATE_COMMENT && hasSubstring('-->', index)) {\n          quote = null;\n          state = STATE_OUTPUT;\n          tagContent = '';\n          break;\n        }\n\n        advance = true;\n        break;\n\n      default:\n        advance = true;\n    }\n\n    if (advance) {\n      switch (state) {\n        case STATE_OUTPUT:\n          output += char;\n          break;\n\n        case STATE_HTML:\n          if (hasAllowableTags) {\n            tagContent += char;\n          }\n\n          break;\n      }\n    }\n  }\n\n  return output;\n}\n\nvar globalObject = null;\n\nfunction getGlobalObject() {\n  if (globalObject !== null) {\n    return globalObject;\n  }\n  /* istanbul ignore next */\n  // It's hard to mock the global variables. This code surely works fine. I hope :)\n\n\n  if (typeof global === 'object' && global.Object === Object) {\n    // NodeJS global object\n    globalObject = global;\n  } else if (typeof self === 'object' && self.Object === Object) {\n    // self property from Window object\n    globalObject = self;\n  } else {\n    // Other cases. Function constructor always has the context as global object\n    globalObject = new Function('return this')();\n  }\n\n  return globalObject;\n}\n\nvar globalObject$1 = getGlobalObject();\nvar previousV = globalObject$1.v;\n/**\n * Restores `v` variable to previous value and returns Voca library instance.\n *\n * @function noConflict\n * @static\n * @since 1.0.0\n * @memberOf Util\n * @return {Object} Returns Voca library instance.\n * @example\n * var voca = v.noConflict();\n * voca.isAlpha('Hello');\n * // => true\n */\n\nfunction noConflict() {\n  if (this === globalObject$1.v) {\n    globalObject$1.v = previousV;\n  }\n\n  return this;\n}\n\n/**\n * A property that contains the library <a href=\"http://semver.org/\">semantic version number</a>.\n * @name version\n * @static\n * @since 1.0.0\n * @memberOf Util\n * @type string\n * @example\n * v.version\n * // => '1.4.0'\n */\nvar version = '1.4.0';\n\n/* eslint sort-imports: \"off\" */\nvar functions = {\n  camelCase: camelCase,\n  capitalize: capitalize,\n  decapitalize: decapitalize,\n  kebabCase: kebabCase,\n  lowerCase: lowerCase,\n  snakeCase: snakeCase,\n  swapCase: swapCase,\n  titleCase: titleCase,\n  upperCase: upperCase,\n  count: count,\n  countGraphemes: countGrapheme,\n  countSubstrings: countSubstrings,\n  countWhere: countWhere,\n  countWords: countWords,\n  escapeHtml: escapeHtml,\n  escapeRegExp: escapeRegExp,\n  unescapeHtml: unescapeHtml,\n  sprintf: sprintf,\n  vprintf: vprintf,\n  indexOf: indexOf,\n  lastIndexOf: lastIndexOf,\n  search: search,\n  charAt: charAt,\n  codePointAt: codePointAt,\n  first: first,\n  graphemeAt: graphemeAt,\n  last: last,\n  prune: prune,\n  slice: slice,\n  substr: substr,\n  substring: substring,\n  truncate: truncate,\n  insert: insert,\n  latinise: latinise,\n  pad: pad,\n  padLeft: padLeft,\n  padRight: padRight,\n  repeat: repeat,\n  replace: replace,\n  replaceAll: replaceAll,\n  reverse: reverse,\n  reverseGrapheme: reverseGrapheme,\n  slugify: slugify,\n  splice: splice,\n  tr: tr,\n  trim: trim,\n  trimLeft: trimLeft,\n  trimRight: trimRight,\n  wordWrap: wordWrap,\n  endsWith: endsWith,\n  includes: includes,\n  isAlpha: isAlpha,\n  isAlphaDigit: isAlphaDigit,\n  isBlank: isBlank,\n  isDigit: isDigit,\n  isEmpty: isEmpty,\n  isLowerCase: isLowerCase,\n  isNumeric: isNumeric,\n  isString: isString,\n  isUpperCase: isUpperCase,\n  matches: matches,\n  startsWith: startsWith,\n  chars: chars,\n  codePoints: codePoints,\n  graphemes: graphemes,\n  split: split,\n  words: words,\n  stripBom: trim$1,\n  stripTags: trim$2,\n  noConflict: noConflict,\n  version: version\n};\n\n/**\n * The chain wrapper constructor.\n *\n * @ignore\n * @param  {string}       subject               The string to be wrapped.\n * @param  {boolean}      [explicitChain=false] A boolean that indicates if the chain sequence is explicit or implicit.\n * @return {ChainWrapper}                       Returns a new instance of `ChainWrapper`\n * @constructor\n */\n\nfunction ChainWrapper(subject, explicitChain) {\n  this._wrappedValue = subject;\n  this._explicitChain = explicitChain;\n}\n/**\n * Unwraps the chain sequence wrapped value.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__value\n * @return {*} Returns the unwrapped value.\n * @example\n * v\n *  .chain('Hello world')\n *  .replace('Hello', 'Hi')\n *  .lowerCase()\n *  .slugify()\n *  .value()\n * // => 'hi-world'\n *\n * v(' Space travel ')\n *  .trim()\n *  .truncate(8)\n *  .value()\n * // => 'Space...'\n */\n\n\nChainWrapper.prototype.value = function () {\n  return this._wrappedValue;\n};\n/**\n * Override the default object valueOf().\n *\n * @ignore\n * @return {*} Returns the wrapped value.\n */\n\n\nChainWrapper.prototype.valueOf = function () {\n  return this.value();\n};\n/**\n * Returns the wrapped value to be used in JSON.stringify().\n *\n * @ignore\n * @return {*} Returns the wrapped value.\n */\n\n\nChainWrapper.prototype.toJSON = function () {\n  return this.value();\n};\n/**\n * Returns the string representation of the wrapped value.\n *\n * @ignore\n * @return {string} Returns the string representation.\n */\n\n\nChainWrapper.prototype.toString = function () {\n  return String(this.value());\n};\n/**\n * Creates a new chain object that enables <i>explicit</i> chain sequences.\n * Use `v.prototype.value()` to unwrap the result. <br/>\n * Does not modify the wrapped value.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__chain\n * @return {Object} Returns the wrapper in <i>explicit</i> mode.\n * @example\n * v('Back to School')\n *  .chain()\n *  .lowerCase()\n *  .words()\n *  .value()\n * // => ['back', 'to', 'school']\n *\n * v(\" Back to School \")\n *  .chain()\n *  .trim()\n *  .truncate(7)\n *  .value()\n * // => 'Back...'\n */\n\n\nChainWrapper.prototype.chain = function () {\n  return new ChainWrapper(this._wrappedValue, true);\n};\n/**\n * Modifies the wrapped value with the invocation result of `changer` function. The current wrapped value is the\n * argument of `changer` invocation.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__thru\n * @param  {Function} changer The function to invoke.\n * @return {Object}           Returns the new wrapper that wraps the invocation result of `changer`.\n * @example\n * v\n *  .chain('sun is shining')\n *  .words()\n *  .thru(function(words) {\n *    return words[0];\n *  })\n *  .value()\n * // => 'sun'\n *\n */\n\n\nChainWrapper.prototype.thru = function (changer) {\n  if (typeof changer === 'function') {\n    return new ChainWrapper(changer(this._wrappedValue), this._explicitChain);\n  }\n\n  return this;\n};\n/**\n * A boolean that indicates if the chain sequence is explicit or implicit.\n * @ignore\n * @type {boolean}\n * @private\n */\n\n\nChainWrapper.prototype._explicitChain = true;\n/**\n * Make a voca function chainable.\n *\n * @ignore\n * @param  {Function} functionInstance The function to make chainable\n * @return {Function}                  Returns the chainable function\n */\n\nfunction makeFunctionChainable(functionInstance) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var result = functionInstance.apply(void 0, [this._wrappedValue].concat(args));\n\n    if (this._explicitChain || typeof result === 'string') {\n      return new ChainWrapper(result, this._explicitChain);\n    } else {\n      return result;\n    }\n  };\n}\n\nObject.keys(functions).forEach(function (name) {\n  ChainWrapper.prototype[name] = makeFunctionChainable(functions[name]);\n});\n\n/**\n * Creates a chain object that wraps `subject`, enabling <i>explicit</i> chain sequences. <br/>\n * Use `v.prototype.value()` to unwrap the result.\n *\n * @memberOf Chain\n * @since 1.0.0\n * @function chain\n * @param  {string} subject The string to wrap.\n * @return {Object}         Returns the new wrapper object.\n * @example\n * v\n *  .chain('Back to School')\n *  .lowerCase()\n *  .words()\n *  .value()\n * // => ['back', 'to', 'school']\n */\n\nfunction chain(subject) {\n  return new ChainWrapper(subject, true);\n}\n\n/**\n * Creates a chain object that wraps `subject`, enabling <i>implicit</i> chain sequences.<br/>\n * A function that returns `number`, `boolean` or `array` type <i>terminates</i> the chain sequence and returns the unwrapped value.\n * Otherwise use `v.prototype.value()` to unwrap the result.\n *\n * @memberOf Chain\n * @since 1.0.0\n * @function v\n * @param {string} subject The string to wrap.\n * @return {Object}  Returns the new wrapper object.\n * @example\n * v('Back to School')\n *  .lowerCase()\n *  .words()\n * // => ['back', 'to', 'school']\n *\n * v(\" Back to School \")\n *  .trim()\n *  .truncate(7)\n *  .value()\n * // => 'Back...'\n */\n\nfunction Voca(subject) {\n  return new ChainWrapper(subject, false);\n}\n\n_extends(Voca, functions, {\n  chain: chain\n});\n\nexport default Voca;\n","import React from 'react'\nimport useSiteMetadata from '../hooks/use-site-metadata'\nimport voca from 'voca'\n\ninterface IListItemElement {\n  '@type': string\n  position: number\n  item: {\n    '@id': string\n    name: string\n  }\n}\n\ninterface IBreadcrumbObj {\n  '@context': string\n  '@type': string\n  name: string\n  itemListElement: Array<IListItemElement>\n}\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname: string\n  children?: React.ReactNode\n  siteUrl?: string\n  instagramUrl?: string\n  linkedInUrl?: string\n}\n\nconst getBreadcrumbsFromPathname = (pathname: string) => {\n  const { siteUrl } = useSiteMetadata()\n  const parts = pathname.split('/').filter((part) => part !== '')\n  const breadcrumbObj: IBreadcrumbObj = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    'name': 'Breadcrumbs',\n    itemListElement: [],\n  }\n  let pathnameBuild = `${siteUrl}`\n  for (let i = 0; i < parts.length; i++) {\n    pathnameBuild += `/${parts[i]}`\n    const breadcrumb = {\n      '@type': 'ListItem',\n      position: i + 1,\n      item: {\n        '@id': pathnameBuild,\n        name: voca.titleCase(parts[i].replace(/\\-/g, ' ')),\n      },\n    }\n    breadcrumbObj.itemListElement.push(breadcrumb)\n  }\n\n  return breadcrumbObj\n}\n\nexport const SEOBreadcrumbsJsonLd = ({ pathname }: SEOProps) => {\n  const schemaOrgJSONLD = getBreadcrumbsFromPathname(pathname)\n\n  return (\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD)}\n    </script>\n  )\n}\n","import React from 'react'\nimport useSiteMetadata from '../hooks/use-site-metadata'\nimport { SEOSiteJsonLD } from './seo-site-json-ld'\nimport { SEOBreadcrumbsJsonLd } from './seo-breadcrumbs-json-ld'\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  children?: React.ReactNode\n  siteUrl?: string\n  instagramUrl?: string\n  linkedInUrl?: string\n}\n\nexport const SEO = ({ title, description, pathname, children }: SEOProps) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image,\n    siteUrl,\n    instagramUrl,\n    linkedInUrl,\n  } = useSiteMetadata()\n  const siteTitle = defaultTitle\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}` || ``,\n    pathname: `${siteUrl}${pathname}` || ``,\n  }\n\n  return (\n    <>\n      {seo.title === siteTitle && <title key=\"title\">{seo.title}</title>}\n      {seo.title !== siteTitle && <title key=\"title\">{`${seo.title} - ${siteTitle}`}</title>}\n      <meta name=\"description\" key=\"description\" content={seo.description} />\n      <meta name=\"image\" key=\"image\" content={seo.image} />\n      <meta name=\"twitter:card\" key=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" key=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" key=\"twitter:url\" content={seo.pathname} />\n      <meta name=\"twitter:description\" key=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" key=\"twitter:image\" content={seo.image} />\n      <SEOSiteJsonLD key=\"site-seo\"/>\n      {pathname && <SEOBreadcrumbsJsonLd key=\"seo-breadcrumbs\" pathname={pathname} />}\n      {children}\n    </>\n  )\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nconst useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          image\n          siteUrl\n          instagramUrl\n          linkedInUrl\n          publisher\n          version\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n\nexport default useSiteMetadata\n"],"names":["Layout","_ref","children","React","Slice","alias","className","SEOSiteJsonLD","title","description","pathname","defaultTitle","defaultDescription","image","siteUrl","instagramUrl","linkedInUrl","useSiteMetadata","seo","url","siteJsonLd","name","sameAs","potentialAction","target","organizationJsonLd","legalName","logo","foundingDate","address","streetAddress","addressLocality","addressRegion","postalCode","addressCountry","contactPoint","contactType","email","localBusinessJsonLd","telephone","priceRange","openingHours","geo","latitude","longitude","type","JSON","stringify","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_slicedToArray","arr","Array","isArray","_arrayWithHoles","Symbol","iterator","toString","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","_iterableToArrayLimit","TypeError","_nonIterableRest","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","isNil","coerceToBoolean","defaultValue","Boolean","isString","subject","coerceToString","String","capitalize","restToLower","subjectString","restToLowerCaseBoolean","toLowerCase","substr","toUpperCase","lowerCase","whitespace","highSurrogate","lowSurrogate","diacriticalMark","base","REGEXP_COMBINING_MARKS","RegExp","REGEXP_SURROGATE_PAIRS","REGEXP_UNICODE_CHARACTER","REGEXP_WHITESPACE","REGEXP_TRIM_LEFT","REGEXP_TRIM_RIGHT","REGEXP_DIGIT","REGEXP_SPECIAL_CHARACTERS","REGEXP_NON_LATIN","REGEXP_HTML_SPECIAL_CHARACTERS","REGEXP_CONVERSION_SPECIFICATION","REGEXP_TRAILING_ZEROS","REGEXP_TAG_LIST","lowerCaseLetter","upperCaseLetter","REGEXP_WORD","REGEXP_LATIN_WORD","REGEXP_ALPHA","REGEXP_ALPHA_DIGIT","REGEXP_EXTENDED_ASCII","nilDefault","words","pattern","flags","patternRegExp","test","flagsString","match","wordToCamel","word","index","kebabCase","map","join","swapAndConcat","swapped","character","upperCase","clipNumber","downLimit","upLimit","MAX_SAFE_INTEGER","toInteger","Infinity","truncate","end","lengthInt","endString","HIGH_SURROGATE_START","HIGH_SURROGATE_END","LOW_SURROGATE_START","LOW_SURROGATE_END","coerceToNumber","Number","nanDefault","codePointAt","position","subjectStringLength","positionNumber","secondCodePoint","codePoint","firstCodePoint","charCodeAt","isLowSurrogate","getAstralNumberFromSurrogatePair","reduce","ReplacementIndex","increment","incrementOnEmptyPosition","getIndexByPosition","TYPE_INTEGER","TYPE_INTEGER_BINARY","TYPE_INTEGER_ASCII_CHARACTER","TYPE_INTEGER_DECIMAL","TYPE_INTEGER_OCTAL","TYPE_INTEGER_UNSIGNED_DECIMAL","TYPE_INTEGER_HEXADECIMAL","TYPE_INTEGER_HEXADECIMAL_UPPERCASE","TYPE_FLOAT_SCIENTIFIC","TYPE_FLOAT_SCIENTIFIC_UPPERCASE","TYPE_FLOAT","TYPE_FLOAT_SHORT","TYPE_FLOAT_SHORT_UPPERCASE","TYPE_STRING","LITERAL_PLUS","LITERAL_MINUS","RADIX_BINARY","RADIX_OCTAL","RADIX_HEXADECIMAL","repeat","times","timesInt","repeatString","buildPadding","padCharacters","padLeft","pad","padString","padRight","addSignToFormattedNumber","replacementNumber","formattedReplacement","conversion","signSpecifier","replacement","parseFloat","isNaN","precision","typeSpecifier","toFixed","toExponential","nonZeroPrecision","toPrecision","replace","formatFloatAsShort","integerBase","integer","parseInt","fromCharCode","integerDecimal","stringFormat","compute","formatFunction","width","alignmentSpecifier","getPaddingCharacter","alignAndPad","ConversionSpecification","properties","percent","paddingSpecifier","replacementIndex","replacements","conversionSpecification","widthSpecifier","precisionSpecifier","isPercentLiteral","slice","actualReplacementIndex","replacementsLength","Error","validate","sprintf","format","formatString","_len","_key","boundReplacementMatch","bind","paddingCharacter","escapeCharactersMap","replaceSpecialCharacter","unescapeCharactersMap","characters","keys","reduceUnescapedString","string","diacritics","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","OE","oe","AE","ae","hv","OI","oi","DZ","Dz","dz","LJ","Lj","lj","NJ","Nj","nj","OU","ou","TH","th","PS","ps","Yo","Ye","Yi","Zh","Ch","Sh","Yu","Ya","zh","ch","sh","yu","ya","yo","ye","yi","diacriticsMap","getLatinCharacter","characterWithoutDiacritic","forEach","removeCombiningMarks","cleanCharacter","latinise","sortStringByLength","str1","str2","includes","search","searchString","indexOf","reduce$1","trimLeft","whitespaceString","matchWhitespace","trimmed","reduceRight","trimRight","OPTION_WIDTH","OPTION_NEW_LINE","OPTION_INDENT","OPTION_CUT","isAlpha","hasSubstringAtIndex","substring","indexOffset","STATE_START_TAG","STATE_NON_WHITESPACE","STATE_DONE","parseTagName","tagContent","state","tagName","char","globalObject","globalObject$1","self","Function","previousV","functions","camelCase","decapitalize","snakeCase","swapCase","split","titleCase","noSplit","noSplitArray","wordsRegExp","count","countGraphemes","countSubstrings","substringString","substringLength","matchIndex","countWhere","predicate","context","predicateWithContext","countTruthy","countWords","escapeHtml","escapeRegExp","unescapeHtml","vprintf","concat","fromIndex","lastIndexOf","fromIndexNumber","charAt","first","graphemeAt","graphemeMatch","graphemeMatchIndex","exec","lastIndex","last","prune","truncatedLength","offset","wordInsertLength","start","insert","toInsert","toInsertString","paddingLength","paddingSideLength","paddingSideRemainingLength","replaceAll","isFunctionalReplace","searchLength","advanceBy","matchPositions","endOfLastMatch","result","_position","reverse","reverseGrapheme","reversedString","$0","$1","$2","slugify","splice","deleteCount","toAdd","toAddString","startPosition","deleteCountNumber","tr","to","values","_extractKeysAndValues","object","sort","extractKeysAndValues","_extractKeysAndValues2","keysLength","valuesLength","isMatch","matchValue","keyIndex","trim","wordWrap","options","_determineOptions","newLine","indent","cut","determineOptions","subjectLength","wrappedLine","spaceToWrapAt","endsWith","isAlphaDigit","isBlank","isDigit","isEmpty","isLowerCase","valueString","isNumeric","valueNumeric","isUpperCase","matches","patternString","startsWith","startString","chars","codePoints","codePointNumber","codePointArray","graphemes","separator","limit","stripBom","stripTags","allowableTags","allowableTagsString","tags","tagsList","parseTagList","replacementString","hasAllowableTags","hasSubstring","depth","output","quote","advance","noConflict","version","ChainWrapper","explicitChain","_wrappedValue","_explicitChain","Voca","valueOf","toJSON","chain","thru","changer","functionInstance","args","SEOBreadcrumbsJsonLd","schemaOrgJSONLD","parts","filter","part","breadcrumbObj","itemListElement","pathnameBuild","breadcrumb","item","voca","getBreadcrumbsFromPathname","SEO","siteTitle","content","useStaticQuery","site","siteMetadata"],"sourceRoot":""}